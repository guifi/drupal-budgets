<?php
// $Id: budgets.module x$

/**
 * @file
 * allow to create budgets, allocated to projects, and then collect funds for them
 */

include_once("supplier.inc.php");      // suppliers node management
include_once("quotes.inc.php");        // quotes node management


/**
* Implementation of hook_menu().
*
*/
function budgets_menu() {
  $items = array();

  $items['admin/settings/budgets'] = array(
    'title' => 'Budgets',
    'description' => 'Administer Budget defaults.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('budgets_admin_settings'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM);

  $items['budgets'] = array(
    'title' => 'Proposals, budgets and fundings',
    'page callback' => 'budgets_page',
//    'page arguments' => array('0', NULL),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK);
//  $items['budgets/%guifi_zone'] = array(
//    'title' => 'Zone proposals, budgets and fundings',
//    'page callback' => 'budgets_page',
//    'page arguments' => array(1),
//    'access callback' => 'user_access',
//    'access arguments' => array('access content'),
//    'type' => MENU_LOCAL_TASK);

  // list budgets
  $items['budgets/%guifi_zone/list'] = array(
    'title' => 'list',
    'page callback' => 'budgets_page',
    'page arguments' => array(1, NULL),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK);
  $items['budgets/%guifi_zone/list/All'] = array(
    'title' => 'all status',
    'page callback' => 'budgets_page',
    'page arguments' => array(1, NULL),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'weight' => 0,
    'type' => MENU_DEFAULT_LOCAL_TASK);
  $items['budgets/%guifi_zone/list/Open'] = array(
    'title' => 'open',
    'page callback' => 'budgets_page',
    'page arguments' => array(1, 3),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK);
  $items['budgets/%guifi_zone/list/Preparation'] = array(
    'title' => 'preparation',
    'page callback' => 'budgets_page',
    'page arguments' => array(1, 3),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK);
  $items['budgets/%guifi_zone/list/Closed'] = array(
    'title' => 'closed',
    'page callback' => 'budgets_page',
    'page arguments' => array(1, 3),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'weight' => 3,
    'type' => MENU_LOCAL_TASK);
  $items['budgets/%guifi_zone/list/Expired'] = array(
    'title' => 'expired',
    'page callback' => 'budgets_page',
    'page arguments' => array(1, 3),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'weight' => 4,
    'type' => MENU_LOCAL_TASK);


  // CNML exports
  $items['budgets/%guifi_zone/cnml'] = array(
    'title' => 'cnml',
    'page callback' => 'budgets_cnml',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK);
  $items['budgets/%guifi_zone/cnml/%/%'] = array(
    'title' => 'cnml',
    'page callback' => 'budgets_cnml',
    'page arguments' => array(1, 3, 4),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK);

//  $items['budgets/%guifi_zone/cnml/short'] = array(
//    'title' => 'cnml',
//    'page callback' => 'budgets_cnml',
//    'page arguments' => array(1,'short'),
//    'access callback' => 'user_access',
//    'access arguments' => array('access content'),
//    'type' => MENU_LOCAL_TASK);
//  $items['budgets/%guifi_zone/cnml/long'] = array(
//    'title' => 'detailed cnml',
//    'page callback' => 'budgets_cnml',
//    'page arguments' => array(1,'long'),
//    'access callback' => 'user_access',
//    'access arguments' => array('access content'),
//    'type' => MENU_LOCAL_TASK);

  $items['node/%budgets/cnml/short'] = array(
    'title' => 'cnml',
    'page callback' => 'budgets_cnml',
    'page arguments' => array(1, 'short'),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'weight' => -7,
    'type' => MENU_CALLBACK);
  $items['node/%budgets/cnml/long'] = array(
    'title' => 'detailed cnml',
    'page callback' => 'budgets_cnml',
    'page arguments' => array(1, 'long'),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'weight' => -7,
    'type' => MENU_CALLBACK);

//  $items['node/%budgets/view'] = array(
//    'title' => 'budget',
//    'page callback' => 'budgets_view',
//    'page arguments' => array(1),
//    'access callback' => 'user_access',
//    'access arguments' => array('access content'),
//    'weight' => -8,
//    'type' => MENU_DEFAULT_LOCAL_TASK);
  $items['node/%budgets/view/items'] = array(
    'title' => 'items',
    'page callback' => 'theme_budgets_items',
    'page arguments' => array(1, TRUE),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'weight' => -8,
    'type' => MENU_LOCAL_TASK);
  $items['node/%budgets/view/funds'] = array(
    'title' => 'funds report',
    'page callback' => 'theme_budgets_funds',
    'page arguments' => array(1, TRUE),
    'access callback' => 'budgets_check_crowdfunding',
    'access arguments' => array(1, TRUE),
    'weight' => -7,
    'type' => MENU_LOCAL_TASK);

  $items['node/%budgets/view/contribute'] = array(
    'title' => 'donate/fund this budget',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('budgets_fund_form', 1),
    'access callback' => 'budgets_check_crowdfunding',
    'access arguments' => array(1, FALSE),
    'weight' => -6,
    'type' => MENU_LOCAL_TASK);

  $items['budgets/js/select-budget/%'] = array(
    'title' => 'Javascript/autocomplete find Budget',
    'page callback' => 'budgets_ahah_select_budget',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['budgets/js/select-supplier'] = array(
    'title' => 'Javascript/autocomplete find Supplier',
    'page callback' => 'budgets_ahah_select_supplier',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['budgets/js/status-dialog'] = array(
    'title' => 'Dynamic AHAH for status dialog based on budget type',
    'page callback' => 'budgets_ahah_status_dialog',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['budgets/%budgets/edit/%'] = array(
    'title' => 'Edit funding',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('budgets_fund_form', 1, 3),
    'access callback' => 'budgets_access',
    'access arguments' => array('update', 1),
    'type' => MENU_CALLBACK,
  );
  $items['budgets/%budgets/delete/%'] = array(
    'title' => 'Delete funding',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('budgets_fund_delete_confirm', 1, 3),
    'access callback' => 'budgets_access',
    'access arguments' => array('update', 1),
    'type' => MENU_CALLBACK,
  );
  $items['budgets/%budgets/fund/%/%'] = array(
    'title' => 'Set a funding status',
    'page callback' => 'budgets_fund_set_status',
    'page arguments' => array(1, 3, 4),
    'access callback' => 'budgets_access',
    'access arguments' => array('update', 1),
    'type' => MENU_CALLBACK,
  );
  $items['budgets/js/select-quote/%'] = array(
    'title' => 'Javascript/autocomplete find supplier quote',
    'page callback' => 'budgets_ahah_select_quote',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $items['node/%budgets_supplier/quotes'] = array(
    'title' => 'Quotes',
    'page callback' => 'budgets_quote_list_by_supplier',
    'page arguments' => array(1),
    'access callback' => 'budgets_access',
    'access arguments' => array('view', arg(1)),
    'type' => MENU_LOCAL_TASK);
  $items['node/%budgets_supplier/quotes/add'] = array(
    'title' => 'Add quote',
    'page callback' => 'budgets_quote_add',
    'page arguments' => array(1),
    'access callback' => 'budgets_supplier_access',
    'access arguments' => array('create', arg(1)),
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'type' => MENU_LOCAL_TASK);
  $items['node/%budgets_supplier/quotes/batch'] = array(
    'title' => 'Batch upload',
    'page callback' => 'budgets_quote_add_batch',
    'page arguments' => array(1),
    'access callback' => 'budgets_supplier_access',
    'access arguments' => array('create', arg(1)),
    'type' => MENU_LOCAL_TASK);

  $items['node/%budgets_supplier/fundings'] = array(
    'title' => 'Fundings',
    'page callback' => 'budgets_supplier_fundings',
    'page arguments' => array(1,'all'),
    'access callback' => 'budgets_access',
    'access arguments' => array('view', arg(1)),
    'type' => MENU_LOCAL_TASK);
  $items['node/%budgets_supplier/fundings/all'] = array(
    'title' => 'all',
    'page callback' => 'budgets_supplier_fundings',
    'page arguments' => array(1,'all'),
    'access callback' => 'budgets_access',
    'access arguments' => array('view', arg(1)),
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'type' => MENU_LOCAL_TASK);
  $items['node/%budgets_supplier/fundings/location'] = array(
    'title' => 'locations',
    'page callback' => 'budgets_supplier_fundings',
    'page arguments' => array(1,'location'),
    'access callback' => 'budgets_access',
    'access arguments' => array('view', arg(1)),
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'type' => MENU_LOCAL_TASK);
  $items['node/%budgets_supplier/fundings/device'] = array(
    'title' => 'devices',
    'page callback' => 'budgets_supplier_fundings',
    'page arguments' => array(1,'device'),
    'access callback' => 'budgets_access',
    'access arguments' => array('view', arg(1)),
    'type' => MENU_LOCAL_TASK);

  $items['node/%budgets_supplier/sla'] = array(
    'title' => 'SLAs',
    'page callback' => 'budgets_supplier_sla',
    'page arguments' => array(1,'all'),
    'access callback' => 'budgets_access',
    'access arguments' => array('view', arg(1)),
    'type' => MENU_LOCAL_TASK);
  $items['node/%budgets_supplier/sla/all'] = array(
    'title' => 'all',
    'page callback' => 'budgets_supplier_sla',
    'page arguments' => array(1,'all'),
    'access callback' => 'budgets_access',
    'access arguments' => array('view', arg(1)),
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'type' => MENU_LOCAL_TASK);
  $items['node/%budgets_supplier/sla/zone'] = array(
    'title' => 'zone',
    'page callback' => 'budgets_supplier_sla',
    'page arguments' => array(1,'zone'),
    'access callback' => 'budgets_access',
    'access arguments' => array('view', arg(1)),
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'type' => MENU_LOCAL_TASK);
  $items['node/%budgets_supplier/sla/location'] = array(
    'title' => 'locations',
    'page callback' => 'budgets_supplier_sla',
    'page arguments' => array(1,'location'),
    'access callback' => 'budgets_access',
    'access arguments' => array('view', arg(1)),
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'type' => MENU_LOCAL_TASK);
  $items['node/%budgets_supplier/sla/device'] = array(
    'title' => 'devices',
    'page callback' => 'budgets_supplier_sla',
    'page arguments' => array(1,'device'),
    'access callback' => 'budgets_access',
    'access arguments' => array('view', arg(1)),
    'type' => MENU_LOCAL_TASK);


  $items['node/%budgets_supplier/budgets'] = array(
    'title' => 'Budgets',
    'page callback' => 'budgets_supplier_list_budgets_by_supplier',
    'page arguments' => array(1),
    'access callback' => 'budgets_access',
    'access arguments' => array('view', arg(1)),
    'type' => MENU_LOCAL_TASK);
/*  $items['node/%budgets_supplier/budgets'] = array(
    'title' => 'Budgets',
    'page callback' => 'budgets_supplier_list_budgets_by_supplier',
    'page arguments' => array(1),
    'access callback' => 'budgets_supplier_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );*/
  /*$items['guifi/menu'] = array(
     'title' => 'guifi.net menus',
     'description' => 'Main menu for guifi.net network management and utilities',
     'page callback' => 'guifi_page',
     'access callback' => 'user_access',
     'access arguments' => array('access content'),
  );
  $items['node/%budgets_supplier/budgets'] = array(
    'title' => 'Budgets',
    'page callback' => 'budgets_page',
    'page arguments' => array(1),
    'access callback' => 'budgets_supplier_access',
    'access arguments' => array('create', arg(1)),
    );*/


  $items['node/%budgets_supplier/budgets/view'] = array(
    'title' => 'list',
    'page callback' => 'budgets_supplier_list_budgets_by_supplier',
    'page arguments' => array(1,4),
    'access callback' => 'budgets_supplier_access',
    'access arguments' => array('create', arg(1)),
    'type' => MENU_LOCAL_TASK);
  $items['node/%guifi_zone/view/budgets'] = array(
    'title' => 'expenses',
    'page callback' => 'budgets_by_zone',
    'page arguments' => array(1,4),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK
  );
  $items['node/%guifi_node/view/nodebudgets'] = array(
    'title' => 'expenses',
    'page callback' => 'budgets_by_node',
    'page arguments' => array(1,4),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_LOCAL_TASK
  );

  $items['node/%budgets_supplier/budgets/add'] = array(
    'title' => 'create budget/expense',
    'page callback' => 'budgets_add',
    'page arguments' => array(1),
    'access callback' => 'budgets_supplier_access',
    'access arguments' => array('create', arg(1)),
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%budgets_supplier/budgets/batch'] = array(
    'title' => 'batch upload',
    'page callback' => 'budgets_add_batch',
    'page arguments' => array(1),
    'access callback' => 'budgets_supplier_access',
    'access arguments' => array('create', arg(1)),
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%budgets_supplier/budgets/batch/review'] = array(
    'title' => 'review upload',
    'page callback' => 'budgets_add_batch_review',
    'page arguments' => array(1,5),
    'access callback' => 'budgets_supplier_access',
    'access arguments' => array('create', arg(1)),
    'file' => 'node.pages.inc',
    'file path' => drupal_get_path('module', 'node'),
    'type' => MENU_LOCAL_TASK,
  );

  //
  $items['guifi/menu/budgets'] = array(
    'title' => 'Providers & accounting',
    'description' => 'Browse information related to providers, volunteers, funding, proposals, expenses, quotes...',
    'page callback' => 'guifi_menu_block_page',
    'access arguments' => array('access content'),
    'weight' => 0,
  );
  $items['guifi/menu/budgets/browse_suppliers'] = array(
    'title' => 'Service providers, Suppliers & Volunteers',
    'description' => 'Find out shops where you can buy equipment and can understand what you require or hire professional services to help you in building infrastructure',
    'page callback' => 'drupal_goto',
    'page arguments' => array('node/' . guifi_bg_zone_root() . '/suppliers'),
    'access arguments' => array('access content'),
  );
  $items['guifi/menu/budgets/browse_budgets'] = array(
    'title' => 'Proposals, Budgets & Fundings',
    'description' => 'Browse the proposals/budgets, find out the costs and help by funding them',
    'page callback' => 'drupal_goto',
    'page arguments' => array('budgets/' . guifi_bg_zone_root() . '/list'),
    'access arguments' => array('access content'),
  );
  $items['guifi/menu/budgets/browse_quotes'] = array(
    'title' => 'Browse Quotes database',
    'description' => 'Find out quotes present in the database, from any supplier',
    'page callback' => 'budgets_quote_list',
    'page arguments' => array(4),
    'access arguments' => array('access content'),
  );

  $items['guifi/menu/admin/budgetssettings'] = array(
    'title' => 'budgets settings',
    'description' => 'Change the settings for "budgets" for guifi.net module ',
    'page callback' => 'drupal_goto',
    'page arguments' => array('admin/settings/budgets'),
    'access arguments' => array('administer site configuration'),
    'weight' => 100,
  );


  return $items;
}

/**
 * Provide a single block from the administration menu as a page.
 * This function is often a destination for these blocks.
 * For example, 'admin/content/types' needs to have a destination to be valid
 * in the Drupal menu system, but too much information there might be
 * hidden, so we supply the contents of the block.
 *
 * @return
 *   The output HTML.
 */
function budgets_menu_block_page() {
  $item = menu_get_item();
  if ($content = system_admin_menu_block($item)) {
    $output = theme_guifi_menu_block_content($content);
  }
  else {
    $output = t('You do not have any active items.');
  }
  return $output;
}

/**
* Implementation of hook_init().
*/
function budgets_init() {
  drupal_add_css(drupal_get_path('module', 'budgets') .'/budgets.css');
}

/**
* Implementation of hook_node_info().
*/
function budgets_node_info() {
  return array(
    'budgets' => array(
      'name' => t('guifi.net Investment or Crowdfunding'),
      'module' => 'budgets',
      'has_title' => TRUE,
      'title_label' => t('Title'),
      'has_body' => TRUE,
      'body_label' => t('Description'),
      'description' => t('Report an Investment or create a Proposal. ' .
          'A Proposal is an itemized project description with allocated due costs. ' .
          'Therefore, contributors can donate funds to it (crowdfunding), or can be' .
          ' used as a RFP formal document (Requirement For Proposals).<br>'.
          'An Investment is about reporting spendings on infrastructure, either for' .
          ' CAPEX -new deployments- or OPEX -maintenance- so can be recognized for ' .
          'accounting.'
          ),
    ),
    'supplier' => array(
      'name' => t('guifi.net Provider/Supplier'),
      'module' => 'budgets_supplier',
      'has_title' => TRUE,
      'title_label' => t('Supplier name'),
      'has_body' => TRUE,
      'body_label' => t('Supplier information page'),
      'description' => t("A provider is a commercial supplier. Once you become a " .
          "supplier, you will be able to quote services " .
          "or materials to deploy/build open networks. "
          )
    ),
    'supplier_quote' => array(
      'name' => t('guifi.net quote provided by supplier'),
      'module' => 'budgets_quote',
      'has_title' => TRUE,
      'title_label' => t('Quote item title'),
      'has_body' => TRUE,
      'body_label' => t('Description of the quoted item'),
      'description' => t("A supply quote is a priced item given by a supplier which " .
          "can be used as a guidance while filling proposals/budgets."),
    ),
  );
    }

/**
* Implementation of hook_perm().
*/
function budgets_perm() {
  return array(
  // for create & manage budgets & funds in general, registered users should
  // be able to create their own budgets, and edit their owns,
  // but only admin could edit others
  // suppliers can manage/update their quotes/budgets until they get into compensate
  // or closed status, then will no longer be able to make. Only reviewer will
  // be ablte.
    'administer budgets',
    'create budgets',
  // for create & manage suppliers
    'administer suppliers',
    'create suppliers',
    'view budgets in preparation',
    'review budgets',
    'official rating',
   );
}

/**
* Implementation of hook_access().
*/
function budgets_access($op, $node) {
  global $user;

  guifi_log(GUIFILOG_TRACE, 'function budgets_access()', $op);

  $node = node_load(array('nid' => $node->id));
  switch ($op) {
    case 'create':
      return user_access('create budgets');
    case 'update':
    case 'delete':
      if ($node->type == 'budgets') {
        if ((user_access('administer budgets')) or
            (user_access('review budgets')))
          return TRUE;
        if (($node->uid == $user->uid) and
            (!in_array($node->budget_status,array('Approved','Closed','Abandoned','Reviewed','Compensated'))))
          return TRUE;
      }
      return FALSE;
    case 'view':
      if ($node->uid == $user->uid)
        return TRUE;
      if (($node->budget_status == 'Preparation'))
        return user_access('view budgets in preparation');
      return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook_help().
 */
function budgets_help($path, $arg) {
  switch ($path) {
    case 'node/add#budgets':
      return t("<p>Create a budget. A budget is an itemized project with allocated due costs. Therefore, contributors can donate funds to it.</p>");
  }
}

/**
 * Implementation of hook_link().
 */

function budgets_link($type, $node = 0, $main) {
  $links = array();

  if ($node->type != 'budgets')
    return;

  if ($node->budget_status == 'Open') {
    $links[] =
      array(
        'title' => t('donate/fund this budget'),
        'href' => 'node/' . $node->nid . '/view/contribute',
        'attributes' => array(
          'title' => t('donate/fund this budget or proposal for this project')
        ));
  }
  $links[] = array(
    'title' => t('cnml'),
    'href' => 'node/' . $node->nid . '/cnml/short',
    'attributes' => array(
    'title' => t('Obtain a CNML export for this budget in abbreviated format'))
  );
  $links[] = array(
    'title' => t('detailed cnml'),
    'href' => 'node/' . $node->nid . '/cnml/long',
    'attributes' => array(
    'title' => t('Obtain a CNML export for this budget in detailed format'))
  );

  return $links;
}

/**
* Implementation of hook_variable().
*/
function budgets_variable($var) {

  $payment_default = t("
To contribute to this budget, please allocate your desired contribution and:
<ul>
<li>Provide your contact information (name, telf. or email) so a promoter will be able to contact you,</li>
<li>... or if you wish, make a money transfer to the account EEEE OOOO DD CCCCCC specifying clearly your name for validation purposes.</li>
</ul>
Your contribution will be in 'Submitted' status. Once is verified, the promoter will update the status of your contibution to <i>'Approved'</i> if accepts it, <i>'Declined'</i> if for any reason this contribution can't be acceped, or <i>'Paid'</i> to confirm that the money has arrived.");

$terms_default = t("<ol>
<li>An open project budget may change without advice depending in how many funds is receiving. Contributors may ask for a return of their funds if they not agree with those changes.</li>
<li>Once a budget is closed, promoters are responsible to execute it, and contributors are not longer allowed to ask for a return.</li>
<li>Promoters are not liable for the results of the project, just for spending the funds in a similar way as described in the budget.</li>
<li>If a project does not execute, promoters will be responsible of returning funds to contributors or allocate them to a another project.</li>
<li>The promoters/contributors are liable by their budgets and fundings. This site just provides a way to communicate between them, with no other responsabilities.</li>
</ol>");

  switch ($var) {
    case 'budget_payment':
      return variable_get($var, $payment_default);
    case 'budget_terms':
      return variable_get($var, $terms_default);
  }
}
/**
* Implementation of hook_admin_seetings().
*/
function budgets_admin_settings() {
  global $user;

  $form_weight = -20;

  $form['budget_block_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Block title'),
    '#required' => FALSE,
    '#default_value' => variable_get("budget_block_title", t("proposals")),
    '#size' => 35,
    '#maxlength' => 255,
    '#description' => t("Title of budgets block..."),
    '#weight' => $form_weight++,
  );

  $form['budget_payment'] = array(
    '#type' => 'textarea',
    '#title' => t('Default payment instructions'),
    '#default_value' => budgets_variable("budget_payment"),
    '#cols' => 60,
    '#rows' => 10,
    '#description' => t("Default text for payment instructions."),
    '#weight' => $form_weight++,
  );

  $form['budget_terms'] = array(
    '#type' => 'textarea',
    '#title' => t('Default terms & conditions'),
    '#default_value' => budgets_variable("budget_terms"),
    '#cols' => 60,
    '#rows' => 10,
    '#description' => t("Default text for budget 'Terms & Conditions' box."),
    '#weight' => $form_weight++,
  );

  $form['budget_expires'] = array(
    '#type' => 'select',
    '#title' => t('Default expiration'),
    '#required' => FALSE,
    '#default_value' => variable_get("budget_expires", '1h'),
    '#options' => _budget_expires_list(),
    '#description' => t('By default, how many weeks the budget will expire (closed if not covered)'),
    '#weight' => $form_weight++,
  );

  $form['budget_currency_txt'] = array(
    '#type' => 'textfield',
    '#title' => t('Default currency text'),
    '#required' => FALSE,
    '#default_value' => variable_get("budget_currency_symbol", "€"),
    '#size' => 5,
    '#maxlength' => 5,
    '#description' => t('By default, currency symbol'),
    '#weight' => $form_weight++,
  );

  $form['budget_currency_symbol'] = array(
    '#type' => 'textfield',
    '#title' => t('Default currency symbol'),
    '#required' => FALSE,
    '#default_value' => variable_get("budget_currency_txt", "Euros"),
    '#size' => 10,
    '#maxlength' => 10,
    '#description' => t('By default, currency abbreviation'),
    '#weight' => $form_weight++,
  );
  $form['budgets_perkm'] = array(
    '#type' => 'textfield',
    '#title' => t('Default cost per km'),
    '#required' => FALSE,
    '#default_value' => variable_get("budgets_perkm", 0.19),
    '#size' => 10,
    '#maxlength' => 10,
    '#description' => t('By default, value per km while calculating driving expenses'),
    '#weight' => $form_weight++,
  );
  $form['budgets_google_api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Google API Key for using embeded maps calculating routes'),
    '#required' => FALSE,
    '#default_value' => variable_get('budgets_google_api_key','AIzaSyC4X7d8lsNAGQE_MR3E1HdHEsh5GgVlut0'),
    '#size' => 80,
    '#maxlength' => 256,
    '#description' => t('To obtain the key for using google embeded maps API, visit the page').':<br><a href="https://developers.google.com/maps/documentation/embed/guide#api_key">https://developers.google.com/maps/documentation/embed/guide#api_key</a>',
    '#weight' => $form_weight++,
  );

  $form['budget_minimum'] = array(
    '#type' => 'textfield',
    '#title' => t('Default minimum contribution'),
    '#required' => FALSE,
    '#default_value' => variable_get("budget_minimum", "0"),
    '#size' => 10,
    '#maxlength' => 10,
    '#description' => t('By default, minimum amount of each single contribution'),
    '#weight' => $form_weight++,
  );
  $form['budget_maximum'] = array(
    '#type' => 'textfield',
    '#title' => t('Default maximum contribution'),
    '#required' => FALSE,
    '#default_value' => variable_get("budget_maximum", "50000"),
    '#size' => 10,
    '#maxlength' => 10,
    '#description' => t('By default, maximum amount of each single contribution'),
    '#weight' => $form_weight++,
  );


  return system_settings_form($form);
}

/**
* Implementation of hook_block().
*/
function budgets_block($op = "list", $delta = 0, $edit = array()) {
 switch ($op) {
    case 'list':
    $blocks[0]["info"] = t(variable_get("budget_block_title", t("Open proposals")));
    return $blocks;

  case 'configure':
    $form['items'] = array(
      '#type' => 'select',
      '#title' => t('Number of items'),
      '#default_value' => variable_get('budgets_block_items', 0),
      '#options' => array('1', '2', '3'),
    );
    return $form;
    case 'save':
    variable_set('budgets_block_items', $edit['items']);

  case 'view':
    switch ($delta) {
      case 0:
    $block['subject'] = t(variable_get('budget_block_title', t("proposals")));
    $block['content'] = budgets_display_block_1($content);
        break;
    }
    return $block;
  }
}

function budgets_display_block_1() {
    $content .= '<div style="text-align: center; background-color: #ffaaaa;">'. l(t('view all open projects'), 'budgets/'. guifi_bg_zone_root() .'/list/Open') .'</div>';
    $today=getdate();
    $qbudgets = db_query(
      "SELECT b.id, b.expires " .
      "FROM {budgets} b " .
      "WHERE b.budget_status = 'Open' and b.zone_id = 3671 and b.expires >= " . $today[0] . " " .
      "ORDER BY b.id DESC");
    $content2="";
    while ($budget = db_fetch_object($qbudgets)) {
      $b = node_load(array('nid' => $budget->id));
      $content2 .= '<div>&middot;&nbsp;<a href="' . base_path() . 'node/' . $budget->id . '">' . $b->title . '</a></div>';
      $content2 .= budgets_bar($b->total, $b->covered, $b->currency_symbol);
    }
    if ($content2!="")
      $content .= t("Help raising the green bars with your donations!") ."<br />" . $content2;

    return $content;
}

/**
* Implementation of hook_load().
*/
function budgets_load($node) {
  global $user;

  if (is_object($node))
    $k = $node->nid;
  else
    $k = $node;

  $node = db_fetch_object(
    db_query("SELECT * FROM {budgets} WHERE id = '%d'", $k));

  if (is_null($node->id))
    return FALSE;

  $items = array();
  $total = 0;
  $covered = 0;
  $funds = array();

  $qry = db_query(
    "SELECT * " .
    "FROM {budget_items} " .
    "WHERE budget_id='%d' " .
    "ORDER BY weight, id",
    $k);
  while ($item = db_fetch_array($qry)) {
    $items[] = $item;
    if ($item['tax']>0)
      $total += ($item['quantity'] * $item['cost']) * (($item['tax']/100)+1);
    else
      $total += ($item['quantity'] * $item['cost']);
  }
  $node->items = $items;
  $node->total = $total;

  $qry = db_query(
    "SELECT * " .
    "FROM {budget_funds} " .
    "WHERE budget_id='%d' " .
    "ORDER BY timestamp_created",
    $k);
  while ($fund = db_fetch_array($qry)) {
    $funds[$fund['id']] = $fund;
    if ($fund['fund_status'] != 'Declined')
      $covered += $fund['amount'];
  }
  $node->funds = $funds;
  $node->covered = $covered;

  list($node->arrexpires['year'],
    $node->arrexpires['month'],
    $node->arrexpires['day']) = explode(',', date("Y,n,j", $node->expires));

  if (empty($node->accdate)) {
  	$node->accdate = time();
  }
  list(
    $node->arraccdate['year'],
    $node->arraccdate['month'],
    $node->arraccdate['day']) = explode(',', date('Y,n,j', $node->accdate));


  if (($node->zone_id == 0) or ($node->zone_id == guifi_zone_root())) {
    // Fill the zone_id field if it is set to null, but we have the node_id
    if (!empty($node->node_id)) {
      $node->zone_id = guifi_get_zone_of_node($node->node_id);
    } else if (!empty($node->supplier_id)) {
      $supplier = db_fetch_object(db_query("SELECT s.zone_id FROM {supplier} s WHERE s.id=%d",$node->supplier_id));
      $node->zone_id = $supplier->zone_id;
    }
  }

  if (is_null($node->notification))
    $node->notification = $user->mail;
  return $node;
}

function budgets_prepare(&$node) {
  global $user;

  if (isset($node->id))
    return;

  $node->notification = $user->mail;
  if (empty($node->payment_instructions))
    $node->payment_instructions = budgets_variable("budget_payment");
  if (empty($node->terms))
    $node->terms = budgets_variable("budget_terms");
  if (empty($node->expires)) {
    switch (variable_get("budget_expires", '1q')) {
      case '1w': $dexp = mktime(0, 0, 0, date("m"),  date("d")+7,  date("Y")); break;
      case '2w': $dexp = mktime(0, 0, 0, date("m"),  date("d")+14,  date("Y")); break;
      case '1m': $dexp = mktime(0, 0, 0, date("m")+1,  date("d"),  date("Y")); break;
      case '2m': $dexp = mktime(0, 0, 0, date("m")+2,  date("d"),  date("Y")); break;
      case '1q': $dexp = mktime(0, 0, 0, date("m")+3,  date("d"),  date("Y")); break;
      case '4m': $dexp = mktime(0, 0, 0, date("m")+4,  date("d"),  date("Y")); break;
      case '1h': $dexp = mktime(0, 0, 0, date("m")+6,  date("d"),  date("Y")); break;
      case '1y': $dexp = mktime(0, 0, 0, date("m"),  date("d"),  date("Y")+1); break;
    }
    list(
      $node->arrexpires['year'],
      $node->arrexpires['month'],
      $node->arrexpires['day']) = explode(',', date('Y,n,j', $dexp));
  }
  if (empty($node->accdate)) {
    list(
      $node->arraccdate['year'],
      $node->arraccdate['month'],
      $node->arraccdate['day']) = explode(',', date('Y,n,j', time()));
  }

  if (empty($node->currency_txt))
    $node->currency_txt = variable_get("budgets_currency_txt", 'Euros');
  if (empty($node->currency_symbol))
    $node->currency_symbol = variable_get("budgets_currency_symbol", '€');
  if (empty($node->min_contribution))
    $node->min_contribution = variable_get("budgets_minimum", 0);
  if (empty($node->max_contribution))
    $node->max_contribution = variable_get("budgets_maximum", 50000);

}

function _budget_expires_list() {
  return array('1w' => t('One week'), '2w' => t('Two weeks'), '1m' => t('One month'), '2m' => t('Two months'), '1q' => t('One quarter'), '4m' => t('4 months'), '1h' => t('Half year'), '1y' => t('One year'));
}

function budgets_add($provider) {
  global $user;

  guifi_log(GUIFILOG_TRACE, 'function budgets_add()', $provider);

  if (empty($provider->id))
    $supplier_id = budgets_supplier_get_supplier_id($user->uid);
  else
    $supplier_id = $provider->id;

  $types = node_get_types();
  $type = 'budgets';
  // Initialize settings:
  $node = array(
    'uid' => $user->uid,
    'notification'=>$user->mail,
    'name' => (isset($user->name) ? $user->name : ''),
    'type' => $type,
    'language' => $user->language,
    'supplier_id' => $supplier_id);

  drupal_set_title(t('Create @name', array('@name' => $types[$type]->name)));
  return drupal_get_form($type .'_node_form', $node);
}
/**
* Implementation of hook_form().
*/
function budgets_form(&$node, &$param) {
  global $user;

  guifi_log(GUIFILOG_TRACE, 'function budgets_form()', $param);

  if (!empty($param['values'])) {
     $node = (object)$param['values'];
     guifi_log(GUIFILOG_TRACE, 'function budgets_form(READ)', $node);
  }

  $weight = -1000;

  budgets_items_clean($node->items);

  $node->supplier_id=current(explode('-',$node->supplier_id));
  $node->node_id=current(explode('-',$node->node_id));
  $node->zone_id=current(explode('-',$node->zone_id));

  $form['#attributes'] = array('class'=>'budget-form');

  if (isset($node->nid))
    $form['id'] = array('#type' => '#hidden', '#value' => $node->nid);
  else {
    $form['new'] = array('#type' => '#hidden', '#value' => TRUE);
    $node->language = $user->language;
    $node->supplier_id = budgets_supplier_get_supplier_id($user->uid);
  }
  $type = node_get_types('type', $node);

  // Title & Description
  $form['titDescr'] = array(
    '#type'        => 'fieldset',
    '#title'       => t('Title & Description'),
    '#collapsible' => TRUE,
    '#collapsed'   => ((empty($node->title)) and (empty($node->body))) ? FALSE : TRUE,
    '#weight' => $weight++,
  );
  if (($type->has_title)) {
    $form['titDescr']['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
      '#default_value' => $node->title,
    );
  }
  if (($type->has_body)) {
    $form['titDescr']['body_field'] = node_body_field(
      $node,
      $type->body_label,
      $type->min_word_count
    );
  }

  // Status, type, dates...
  $form['general'] = array(
    '#type'        => 'fieldset',
    '#title'       => t('General: Status, type, date, ...'),
    '#attributes'  => array('class'=>"budget-container-inline"),
    '#collapsible' => TRUE,
    '#collapsed'   => FALSE,
//    '#description'   => t(
//    		"Budgets in <em>preparation</em> or <em>review</em> status are not publicly visible.<br>" .
//    		"Use <em>Crowdfunding</em> for donations or make public open calls for crowdfundings.<br>".
//    		"Use <em>CAPEX/OPEX</em> type options if you plan to get compensated or reimbursed.<br>".
//    		"Expiration date (open crowdfundings) and due/execution date."),
    '#weight' => $weight++,
  );

  $form['general']['budget_type'] = array(
    '#type'          => 'select',
    '#title'         => t('Type'),
    '#description'   => t(
            "For revenue recognition and compensation processes.<br>" .
            "Select the type of budget or expense:<ul>" .
    		"<li><em>Crowdfunding</em>: For donations, crodfunding open calls...</li>" .
            "<li><em>CAPEX</em>: NEW deployments in new areas</li>" .
    		"<li><em>OPEX</em>: MAINTENANCE and UPGRADES</li></ul>"),
    '#default_value' => $node->budget_type,
/*    '#ahah'              => array(
      'event'            => 'blur',
      'path'             => 'budgets/js/status-dialog',
      'wrapper'          => 'status-dialog',
      'method'           => 'replace',
      'effect'           => 'fade',
    ),*/
    //'
    '#options' => guifi_types('budget_type'),
  );

  if (($node->budget_status == 'Review') and !(user_access('review budgets'))) {
    $form['general']['budget_type']['#options'] = array_intersect_key(
  	    $form['general']['budget_type']['#options'],
        array($node->budget_type=>1)
      );
    $form['general']['budget_type']['#description'] = t("Cannot change budget type on budgets under review");
  } else
  $form['general']['bstatus_refresh'] = array(
    '#type'          => 'image_button',
    '#src'=> drupal_get_path('module', 'budgets').'/icons/refresh.png',
    '#prefix'            => '<div class="form-item"><label>&nbsp</label>',
    '#suffix'            => '</div>',
    '#attributes' => array('title' => t('Refresh values for status select list depending on budget type')),
    '#ahah'              => array(
      'event'            => 'click',
      'path'             => 'budgets/js/status-dialog',
      'wrapper'          => 'status-dialog',
      'method'           => 'replace',
      'effect'           => 'fade',
    ),
  );


  $form['general']['status_dialog'] =
    budgets_form_status_dialog($node->budget_type,$node->budget_status);

  $form[general][dates] = array(
    '#type'=>'fieldset',
    '#attributes'  => array('class'=>"budget-container-inline"),
    '#prefix'        => '<div style="clear: both"></div>',
  );
  $form[general][dates]['arrexpires'] = array(
    '#type'          => 'date',
    '#title'         => t('Expiration'),
    '#default_value' => $node->arrexpires,
    '#description'   => t("Proposals/Opens calls for crowdfunding:<br>
       Period for accepting contributions/comments"),
  );
  $form[general][dates]['arraccdate'] = array(
    '#type'          => 'date',
    '#title'         => t('Accounting date'),
    '#default_value' => $node->arraccdate,
    '#description'   => t("Execution date (or planned)"),
  );

  // Related task tiket
  $form['ticket'] = array(
    '#type' => 'fieldset',
    '#title' => t('Priority & Related to ticket'),
    '#attributes'  => array('class'=>'budget-container-inline'),
    '#collapsible' => TRUE,
    '#collapsed' => ($node->budget_type!='crowdfunding' and
       (empty($node->ticket_link) or $node->priority=='unknown')) ?
      FALSE : TRUE,
    '#description'   =>  t('Note that this fields can be mandatory for expense recognition purposes according to applicable policies.'),
    '#weight' => $weight++,
  );
  $form['ticket']['priority'] = array(
    '#type'          => 'select',
    '#title'         => t('Priority'),
    '#options'       => guifi_types('budget_priority'),
    '#default_value' => ($node->priority) ? $node->priority : 'normal',
  );
  $form['ticket']['ticket_link'] = array(
    '#type'          => 'textfield',
    '#size'          => 130,
    '#maxlength'     => 100,
    '#title'         => t('Ticket linked'),
    '#default_value' => $node->ticket_link,
    '#description'   =>  t('URL which links with the corresponding ticket, email, etc. causing the expense'),
  );


  /*
   * Contact
   */
  $contactName =
    (($node->supplier_id > 0) and (is_numeric($node->supplier_id))) ?
      $node->supplier_id.'-'.budgets_supplier_get_suppliername($node->supplier_id) : $node->supplier_id;
  $form['contact'] = array(
    '#type'        => 'fieldset',
    '#title'       => t('Contact and Supplier').' '.$node->notification.' '.$contactName,
    '#collapsible' => TRUE,
    '#collapsed'   => (($node->notification) or ($node->supplier_id)) ? TRUE : FALSE,
    '#attributes'  => array('class'=>"budget-container-inline"),
    '#weight' => $weight++,
  );
  $form['contact']['notification'] = array(
    '#type'             => 'textfield',
    '#size'             => 25,
    '#maxlength'        => 50,
    '#title'            => t('Contact'),
    '#required'         => TRUE,
    '#element_validate' => array('guifi_emails_validate'),
    '#default_value'    => $node->notification,
    '#description'      =>  t('Mailid where changes on the device will be notified, ' .
        'if many, separated by \',\'.')
  );
  $form['contact']['supplier_id'] = array(
    '#type'              => 'textfield',
    '#title'             => t('Supplier'),
    '#size'             => 25,
    '#maxlength'        => 1024,
    '#default_value'     => (($node->supplier_id > 0) and (is_numeric($node->supplier_id))) ?
      $node->supplier_id.'-'.budgets_supplier_get_suppliername($node->supplier_id) : $node->supplier_id,
    '#description'       =>  t('Supplier who provides the time & materials (optional)'),
    '#autocomplete_path' => 'budgets/js/select-supplier',

  );

  /*
   * Location
   */
  $locName = (($node->node_id > 0) and (is_numeric($node->node_id))) ?
      $node->node_id.'-'.guifi_get_zone_nick(guifi_get_zone_of_node($node->node_id)).', '.guifi_get_nodename($node->node_id) :
      $node->node_id;
  $form['budgets_location'] = array(
    '#type'        => 'fieldset',
    '#title'       => t('Location').' '.$locName,
    '#attributes'  => array('class'=>'budget-container-inline'),
    '#collapsible' => TRUE,
    '#collapsed'   => ($locName) ? TRUE : FALSE,
    '#weight' => $weight++,
  );
  $form['budgets_location']['node_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Node'),
    '#size'          => 60,
    '#maxlength'     => 256,
    '#description' =>  t('Affected guifi.net node'),
    '#autocomplete_path' => 'guifi/js/select-node',
    '#default_value' => $locName,
  );

  $form['budgets_location']['zone_id'] = array (
    '#type' => 'textfield',
    '#title' => t('Zone'),
   '#description' => t('If left empty, will be filled with node zone'),
    '#size' => 50,
    '#default_value'=> (($node->zone_id!='') and (is_numeric($node->zone_id))) ?
       $node->zone_id.'-'.guifi_get_zone_name($node->zone_id) : $node->zone_id,
    '#maxsize'=> 256,
    '#autocomplete_path' => 'guifi/js/select-zone',
    '#disabled' => in_array($node->budget_type,array('none','other','crowdfunding'))?
      FALSE : TRUE,
  );

  /*
   * Currency
   */
  $form['budgets_currency'] = array(
    '#type' => 'fieldset',
    '#title' => t('Currency').' '.$node->currency_symbol,
    '#attributes'  => array('class'=>'budget-container-inline'),
    '#collapsible' => TRUE,
    '#collapsed' => ($node->currency_symbol) ? TRUE : FALSE,
    '#weight' => $weight++,
  );
  $form['budgets_currency']['currency_txt'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#default_value' => $node->currency_txt,
    '#size' => 10,
    '#maxlength' => 10,
  );
  $form['budgets_currency']['currency_symbol'] = array(
    '#type' => 'textfield',
    '#title' => t('Symbol'),
    '#default_value' => $node->currency_symbol,
    '#size' => 5,
    '#maxlength' => 5,
  );

  // Automatic load of elements
  $form['batch'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add elements automatically by using previous proposals, quotes or distance expense'),
    '#collapsible' => TRUE,
    '#collapsed' => (count($node->items)) ? TRUE : FALSE,
    '#weight' => $weight++,
  );

  // Load an existing quote from the database
  for ($i=0; $i < 6; $i++)
    $form['batch']['loadquote'][$i] = array(
      '#type' => 'textfield',
      '#parents' => array('loadquote',$i),
      '#title' => ($i) ? FALSE : t('Add elements from the Supplier Quotes database'),
      '#maxlength'     => 256,
      '#description' => ($i == 5) ? t('Find an existing quote provided by a supplier, ' .
          'and then press "Load Quote"' .
          ' to get the quote loaded into this proposal.') : FALSE,
      '#default_value' => t('None'),
      '#autocomplete_path' => 'budgets/js/select-quote',
    );

  // Use an existing proposal as a template
  $form['batch']['loadbudget'] = array(
    '#type' => 'textfield',
    '#title' => t('Add elements from an existing Proposal/Expense to be used as a template'),
    '#maxlength'     => 256,
    '#description' => t('Find an existing proposal/expense to get the existing items of that proposal loaded into this one'),
    '#default_value' => t('None'),
    '#autocomplete_path' => 'budgets/js/select-budget',
  );

  // Calculate the expense for the driving distance
  $form['batch']['drivingDist'] = array(
    '#type' => 'textfield',
    '#title' => t('Add Driving distance expense element by setting the origin'),
    '#maxlength'     => 256,
    '#autocomplete_path' => 'guifi/js/select-node',
      '#description' => t('Distance will be clculated from this origin point
          to the affected node.'),
    '#default_value' => t('None'),
  );

  $form['batch']['doLoad'] = array(
    '#type' => 'submit',
    '#submit' => array('budgets_form_load_elements'),
    '#value' => t('Load')
  );

  $form['items'] = budgets_items_form($node->items,$weight);

  $form['#submit'] = array('budgets_form_submit');

  /*
  * If type = crowdfunding, then fill this fields
  */
  $form['others'] = array(
    '#type'        => 'fieldset',
    '#title'       => t('Crowdfunding instructions'),
    '#description' => t('Promoter, payment instructions, terms & conditions'),
    '#collapsible' => TRUE,
    '#collapsed'   => TRUE
  );
  $form['others']['promoter'] = array(
    '#title' => t("Promoter(s)"),
    '#type' => 'textarea',
    '#default_value' => $node->promoter,
    '#description' => t('Explain here who are you, how to contact you, why people have to trust you, what you have already done...'),
    '#rows' => 3,
    '#weight' => $form_weight++
  );
  $form['others']['payment_instructions'] = array(
    '#title' => t("Payment instructions"),
    '#type' => 'textarea',
    '#default_value' => $node->payment_instructions,
    '#description' => t("Explain here how to send money funds for this project, it can be an account for money transfers, ask for contact information, links to paypal or similar online applications..."),
    '#rows' => 7,
    '#weight' => $form_weight++
  );

  $form['others']['terms'] = array(
    '#title' => t("Terms & Conditions"),
    '#type' => 'textarea',
    '#default_value' => $node->terms,
    '#description' => t("Explain here the terms and conditions of this project or use the default text provided"),
    '#rows' => 7,
    '#weight' => $form_weight++
  );

  $form['budgets_contribution'] = array(
    '#type' => 'fieldset',
    '#title' => t('Contribution limits'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['budgets_contribution']['min_contribution'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum'),
    '#default_value' =>  $node->min_contribution,
    '#size' => 10,
    '#maxlength' => 10,
    '#description' => t("Below this amount, contributions will not be accepted"),
    '#prefix' => '<table><tr><td>',
    '#suffix' => '</td>'
  );
  $form['budgets_contribution']['max_contribution'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum'),
    '#default_value' =>  $node->max_contribution,
    '#size' => 10,
    '#maxlength' => 10,
    '#description' => t("Above this amount, contributions will not be accepted"),
    '#prefix' => '<td>',
    '#suffix' => '</td></tr></table>'
  );

  return $form;
}

function budgets_form_status_dialog($btype,$bstatus) {
  global $user;

  guifi_log(GUIFILOG_TRACE,sprintf('budgets_form_status_dialog (%s)',$bstatus));

  $budgetStatusOpt = guifi_types('budget_status',null,null,$btype);

  // Set the available options according to the role & status
  // if budget status is under review, only reviewers can change the status
  if ($bstatus == 'Review') {
    if (!user_access('review budgets'))
        $budgetStatusOpt = array_intersect_key($budgetStatusOpt,array('Review'=>''));
  // all other status, set available options according to the rola
  }  else if (!user_access('review budgets'))
    $budgetStatusOpt = array_diff_key($budgetStatusOpt,
      array('Approved'=>'','Review'=>'','Reviewed'=>'','Compensated'=>''));

  $form['budget_status'] = array(
    '#type'          => 'select',
    '#title'         => t('Status'),
    '#default_value' => $bstatus,
    '#description'   => t("Current situation."),
    '#options'       =>  $budgetStatusOpt,
    '#prefix' => '<div id="status-dialog">',
    '#suffix' => '</div>',
    '#weight'        => 1,
  );

  // only reviewers/admins can change status on closed or under review budgets
  if (in_array($bstatus,array('Review','Closed','Approved','Abandoned','Compensate','Compensated'))) {
    if ((!user_access('review budgets')) or (!user_access('administer budgets')))
      $form['general']['budget_status']['#disabled'] = TRUE;
    $form['budget_status']['#description'] .= '<br>'.
      t("Contact reviewer to change this status");
  }

  if ($bstatus == 'Review') {
    $form['budget_status']['#description'] .= '<br>'.t('Once corrected, add a comment and contact the reviewer');
  }
  //$form['budget_status']['#description'] .= '<br>'.
  //  t('While under preparation, not seen by others.');

  if (array_key_exists('Executed',$budgetStatusOpt)) {
    $form['budget_status']['#description'] .= '<br>'.
       t('Status at the compensation workflow.');
  }
  return $form;
}

function budgets_item_form($item, $ki, $fold = TRUE) {

  $it = $item;

  $folded =  $fold ? $fold : !empty($item['description']);

  if (empty($it['title'])) {
    $title = t('New item');
  }
  else {
    if (empty($item['title']))
      $title = t('item');
    else
      $title = $item['title'];

    $title .=
      // str_pad("",10,' ').
      ': ' .
      $item['quantity'] . ' * ' . number_format($item['cost'], 2, ',', '.') . ' = ' .
      number_format($item['quantity'] * $item['cost'], 2, ',', '.');
  }

  if ($item['deleted'])
    $title = t('Deleted').' - '.$title;
//    $folded = FALSE;

  $f = array(
    '#type' => 'fieldset',
    '#attributes' => array('class'=>'budget-item'),
    '#title' => $ki.' - '.$title,
//    '#description' => t('TAX should be in %, zero value means tax included'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => $folded,
    '#weight'=>$ki,
  );

  $f2 = guifi_form_hidden_var($item,
    array('id', 'title'));

  $f = array_merge($f, $f2);

  if ($item['deleted']) {
    $f['deleted'] = array('#type' => 'hidden', '#value' => TRUE);
    $f['deletedHelp'] = array(
      '#type' => 'item',
      '#title' => t('Deleted') . ': ' . $item['title'],
      '#value' => $item['description'],
      '#description' => t("Do not save this proposal " .
          "if you don't want to confirm the deletion"),
      );
    $f['quantity'] = array('#type' => 'hidden', '#value' => $item['quantity']);
    $f['cost'] = array('#type' => 'hidden', '#value' => $item['cost']);
    $f['title'] = array('#type' => 'hidden', '#value' => $item['title']);
    $f['description'] = array('#type' => 'hidden', '#value' => $item['description']);
    $f['iQuantity'] = array(
      '#type' => 'item',
      '#title' => t('Quantity'),
      '#value' => $item['quantity'],
      );
    $f['iCost'] = array(
      '#type' => 'item',
      '#title' => t('Cost'),
      '#value' => $item['cost'],
      );
    $f['deletedDescr'] = array('' .
      '#type' => 'item',
      '#title' => t('item deleted'),
      '#value' => t('This item will be deleted ' .
          'when the proposal will be saved'),
      '#description' => t("Do not save this proposal " .
          "if you don't want to confirm the deletion"),
      );
    return $f;
  }

  $f['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#size'  => 60,
    '#maxlength' => 1024,
    '#required' => FALSE,
    '#default_value' => !empty($item['title']) ? $item['title'] : NULL,
/*    '#prefix' => ($ki == 0)  ?
      '<table><tr><th>'.
      t('Title').'</th><th>'.
      t('Count').'</th><th>'.
      t('Tax').'</th><th>'.
      t('Cost').'</th><th>'.
      t('Weight').'</th><th><th></th></tr>'.
       '<tr><td><div class="budget-item">' :
       '<tr><td><div class="budget-item">',
    '#suffix' => '</td>'
 */
   );
  $f['quantity'] = array(
    '#type' => 'textfield',
    '#title' => t('Quantity'),
    '#default_value' =>  $item['quantity'],
    '#size' => 6,
    '#maxlength' => 12,
 //   '#prefix' => '<td>',
//    '#suffix' => '</td>'
  );
  $f['tax'] = array(
    '#type' => 'textfield',
    '#title' => t('Tax'),
    '#default_value' =>  $item['tax'],
    '#size' => 10,
    '#maxlength' => 12,
//    '#prefix' => '<td>',
//    '#suffix' => '</td>'
  );
  $f['cost'] = array(
    '#type' => 'textfield',
    '#title' => t('Cost'),
    '#default_value' =>  $item['cost'],
    '#size' => 10,
    '#maxlength' => 12,
//    '#prefix' => '<td>',
//    '#suffix' => '</td>'
  );
  $f['weight'] = array(
    '#type' => 'weight',
    '#title' => t('Weight'),
    '#default_value' => $item['weight'],
    '#delta' => 30,
//    '#prefix' => '<td>',
//    '#suffix' => '</td>'
  );
  // adding an OK button just to avoid delete as default action if enter
  $f['ok'] = array(
    '#type' => 'image_button',
    '#title' => t('Operations'),
    '#src'=> drupal_get_path('module', 'budgets').'/icons/ok.png',
    '#attributes' => array('title' => t('Validate')),
    '#prefix' => '<td>',
//    '#submit' => array('budgets_form_item_delete'),
//    '#value' => t('Ok'),
//    '#name' => 'ok-' . $ki,
//    '#executes_submit_callback' => TRUE,
  );
  if ((!empty($item['title'])) and (!empty($item['description'])))
  $f['delete_button'] = array(
    '#type' => 'image_button',
    '#src'=> drupal_get_path('module', 'budgets').'/icons/drop.png',
//    '#submit' => array('budgets_form_item_delete'),
    '#attributes' => array('title' => t('Delete item')),
//    '#prefix' => '<td>',
//    '#suffix' => '</td></tr>'
//    '#submit' => array('budgets_form'),
//    '#name' => 'delete-' . $ki,
//    '#value' => 'delete-' . $ki,
//    '#executes_submit_callback' => TRUE,
  );
  /*$f['delete_button'] = array(
    '#type' => 'button',
    '#submit' => array('budgets_form_item_delete'),
    '#value' => t('Delete item'),
    '#name' => 'delete-' . $ki,
    '#executes_submit_callback' => TRUE,
  );*/

  $f['txt'] = array(
    '#type' => 'fieldset',
    '#title' => t('Item description & comments'),
    '#tree' => FALSE,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#attributes' => array('class' => t('budget-comment')),
 //   '#prefix' => '<tr><td colspan="5">',
  );
  // Description
  $f['txt']['description'] = array(
    '#type' => 'textarea',
    '#description' => t('Describe the item.<br>On items to compensate, when adds or replaces a device, specify the url or id of the device at the web (could be rejected if not properly described).'),
    '#parents'=> array('items', $ki, 'description'),
    '#default_value' => $item['description'],
    '#prefix' => '<div>',
    '#suffix' => '</div>'
  );
  // Comments
  $f['txt']['comments'] = array(
    '#type' => 'textarea',
    '#parents'=> array('items', $ki, 'comments'),
    '#description' => t('Additional comments, like purpose of the change, motivation for choosing this device...'),
    '#default_value' => $item['comments'],
    '#prefix' => '<div>',
    '#suffix' => '</div>'
  );

  $f['#submit'] = array('budgets_form_submit');


  return $f;
}

function budgets_items_form($items,&$weight) {
  $txtmore = t('If you need more items, save & edit again ' .
        'or press "Preview" and you will get a new item to fill');
  $f = array(
    '#type' => 'fieldset',
    '#title' => t('Budget items'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#description' => $txtmore,
    '#weight' => $weight++,
//    '#prefix'=> '<table>'
  );

  // Sort items by weight
  $c = 0;
  $cw = -30;
  $total = 0;
  if (count($items)) {
    foreach ($items as $ki => $item)
      $witems[$ki] = $item['weight'];
    asort($witems);

    // list items
    foreach ($witems as $ki => $item) {
      if (!$items[$ki]['deleted'])
        $total += $items[$ki]['quantity']*$items[$ki]['cost'];
      $c++;
      if ($cw < $items[$ki]['weight'])
        $cw = ($items[$ki]['weight']+1);
      $f[$ki] = budgets_item_form($items[$ki], $ki);
    } // foreach item
  }

  $ki++;

  $f[$ki] = budgets_item_form(array('new'=>TRUE,'weight'=>$cw+2), $ki, FALSE);

//  for ($c = $ki + 1; $c < ($ki + 2); $c++) {
//    $cw++;
//    $f[$c] = budgets_item_form(array('weight' => $cw, 'new' => TRUE), $c);
//  }

  $f['#title'] .= ' ('.
    format_plural(count($items), t('1 item'), t('@count items')) . ', ' .
    t('total') . ': ' . number_format($total, 2, ',', '.') . ')';


  return $f;
}

function budgets_form_submit($form, &$form_state) {
  $parents = $form_state['clicked_button']['#parents'];
//  $params = explode('-', $form_state['clicked_button']['delete']);
  guifi_log(GUIFILOG_TRACE, 'function budgets_form_item_delete()',$form_state['clicked_button']['#parents']);

  if ($parents[2]=='delete_button') {
    $form_state['values']['items'][$parents[1]]['deleted']=TRUE;
//    guifi_log(GUIFILOG_BASIC, 'function budgets_form_item_delete()', $params);
  }
  $form_state['rebuild'] = TRUE;
}

function budgets_form_load_elements($form, &$form_state) {
  $node = &$form_state['values'];
  guifi_log(GUIFILOG_TRACE, 'function budgets_form_load_elements()',$node['loadquote']);

  budgets_items_clean($node['items']);

  // find higest weight
  $cw = -30;
  foreach ($node['items'] as $k => $v)
    if ($v['weight']>$cw)
      $cw=$v['weight']+1;

  // Load elements from existing proposal
  budgets_form_load_budget($node[loadbudget], $node[items], $cw);

  // Load quoted elements
  for ($i=0; $i < 6; $i++)
    budgets_form_load_quote($node[loadquote][$i], $node[items], $cw);

  // Load distance expenses
  budgets_form_load_distance($node, $node[drivingDist], $node[items], $cw);

  // query existing budget/proposal

  guifi_log(GUIFILOG_TRACE, 'function budgets_form_load_elements(OUT)', $node[items]);

  $form_state['#redirect'] = FALSE;
  $form_state['rebuild'] = TRUE;
}


function budgets_form_load_budget($loadBudget, &$items, &$cw) {
  if ((empty($loadBudget)) or ($loadBudget == t('None')))
    return;

  guifi_log(GUIFILOG_TRACE, 'function budgets_form_load_budget()', $node['loadbudget']);

  $toLoad = explode('-', $loadBudget);
  if ((empty($toLoad[0])) or
     (!is_numeric($toLoad[0])))
    return;

  // query existing budget/proposal
  $qry = db_query(
    'SELECT i.* ' .
    'FROM {budget_items} i ' .
    'WHERE budget_id=%d ' .
    'ORDER BY i.weight, i.id',
    $toLoad[0]
  );

  // load items found into current budget
  while ($newI = db_fetch_array($qry)) {
    $newI['weight'] = $cw++;
    $newI['new'] = TRUE;
    $items[] = $newI;
    $cw++;
  }
  guifi_log(GUIFILOG_TRACE, 'function budgets_form_load_budget(OUT)', $node);
}

define('QUOTEHELP','Edit & replace this text with a brief description, what it does, etc.<br>
      For expense recognition purposes do also provide:
      </ul><li>When applicable, specify the device number, name or url of the device, i.e.:
        <a href="http://guifi.net/ca/guifi/device/2829" alt="GurbElSerratST" title="GurbElSerratST">GurbElSerratST - http://guifi.net/ca/guifi/device/2829</a></li>
      <li>Explain if adds a new component, or replaces an existing one</li>
      <li>Is recommended to provide a small resolution picture (i.e. 480px)</li></ul>');


function budgets_form_load_quote($loadQuote, &$items, &$cw) {

  guifi_log(GUIFILOG_TRACE, 'function budgets_form_load_quote()', $loadQuote);

  if ((empty($loadQuote)) or ($loadQuote == t('None')))
    return;

  $toLoad = explode('-', $loadQuote);
  if ((empty($toLoad[0])) or
     (!is_numeric($toLoad[0])))
    return;

  // load quote
  $quote = node_load(array('nid' => $toLoad[0]));
  if ($quote->type != 'supplier_quote')
    return;

  guifi_log(GUIFILOG_TRACE, 'function budgets_form_load_quote()', $quote);

  $cw++;

  $newI = array();
  $newI['weight'] = $cw++;
  $newI['new'] = TRUE;
  $newI['title'] = $quote->title;
  $newI['quantity'] = 1;
  $newI['tax'] = $quote->tax;
  $newI['cost'] = $quote->cost;

  $newI['description'] = $quote->body.'<br>'.t(QUOTEHELP);

  $supplier = node_load(array('nid' => $quote->supplier_id));

  $newI['comments'] = theme_refquote($quote, $supplier).'<br>.';

  $items[] = $newI;

  guifi_log(GUIFILOG_TRACE, 'function budgets_form_load_quote(OUT)', $newI);
}

function budgets_form_load_distance($node, $loadDistance, &$items, &$cw) {
  if ((empty($loadDistance)) or ($loadDistance == t('None')))
    return;
  guifi_log(GUIFILOG_TRACE, 'function budgets_form_load_distance()', $loadDistance);

  $toLoadFrom = explode('-', $loadDistance);
  if ((empty($toLoadFrom[0])) or
     (!is_numeric($toLoadFrom[0])))
    return;
  $toLoadDest = explode('-', $node['node_id']);
  if ((empty($toLoadDest[0])) or
     (!is_numeric($toLoadDest[0])))
    return;

  // load distance
  $locDest = node_load(array('nid' => $toLoadDest[0]));
  $locFrom = node_load(array('nid' => $toLoadFrom[0]));

  $distURL = sprintf("http://maps.googleapis.com/maps/api/distancematrix/json?origins=%s,%s&destinations=%s,%s&mode=driving&units=metric&sensor=false",
    $locFrom->lat,$locFrom->lon,$locDest->lat,$locDest->lon);
  $ch = curl_init();
  guifi_log(GUIFILOG_TRACE, 'function budgets_form_load_distance(CURL)', $ch);
  curl_setopt($ch, CURLOPT_URL, $distURL);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  $Dist = curl_exec($ch);
  curl_close($ch);

  if ($Dist)
    $Dist=json_decode($Dist,true);

  guifi_log(GUIFILOG_TRACE, 'function budgets_form_load_distance(JSON OUT)', $Dist);
  guifi_log(GUIFILOG_TRACE, 'function budgets_form_load_distance(JSON OUT)', $Dist[rows][0][elements][0][distance]);

  $mapURL = sprintf("http://www.google.com/maps/dir/%s,%s/%s,%s",
    $locFrom->lat,$locFrom->lon,$locDest->lat,$locDest->lon);

  $cw++;

  $newI = array();
  $newI['weight'] = $cw++;
  $newI['new'] = TRUE;
  $newI['title'] = t('Driving expenses'). '-' .
    $Dist[rows][0][elements][0][distance][text];
  $newI['quantity'] = sprintf("%1.1f",$Dist[rows][0][elements][0][distance][value]/500);
  $newI['tax'] = 0;
  $newI['cost'] = variable_get('budgets_perkm',0.19);

  $newI['description'] = '<table><tr>'.
    '<td><ul><li>'.t('From').': '.l($locFrom->id.'-'.$locFrom->title,'/node/'.$locFrom->id).'</li>'.
    '<li>'.t('To').': '.l($locDest->id.'-'.$locDest->title,'/node/'.$locDest->id).'</li>'.
    '<li>'.t('Distance').': '.$Dist[rows][0][elements][0][distance][text].
    '<br>('.t('2-way').': '.sprintf("%1.1f",$Dist[rows][0][elements][0][distance][value]/500).')</li>'.
    '<li>'.t('Duration').': '.$Dist[rows][0][elements][0][duration][text].'</li>'.
    '<li><a href="'.$distURL.'" >'.t('JSON call').'<a></li>'.
    '<li><a href="'.$mapURL.'" target="_blank" >'.t('View route on a full screen').'<a></li>'.
    '</ul></td>'.
    '<td>'.
    '<iframe src="https://www.google.com/maps/embed/v1/directions?'.
      'key='.variable_get('budgets_google_api_key','AIzaSyC4X7d8lsNAGQE_MR3E1HdHEsh5GgVlut0').
      '&mode=driving'.
      '&origin='.$locFrom->lat.','.$locFrom->lon.
      '&destination='.$locDest->lat.','.$locDest->lon.'" width="450" height="250">'.
    '</td></tr></table>';

  $items[] = $newI;

  guifi_log(GUIFILOG_TRACE, 'function budgets_form_load_distance0(OUT)', $items);
}


function budgets_fund_delete_confirm(&$form_state, $node) {
  $node = node_load(array('nid' => $node->id));
  $fid = arg(3);

  $fund=&$node->funds[$fid];

  $form['id'] = array('#type' => 'value', '#value' => $fid);
  $form['budget_id'] = array('#type' => 'value', '#value' => $node->id);

  return confirm_form($form,
    t('Are you sure you want to delete fund at %amount ' .
        'from %contributor of %title?',
        array(
         '%contributor' => $fund['contributor_name'],
         '%amount' => $fund['amount'],
         '%title' => $node->title)),
    'budgets/' . $node->id . '/edit/' . $fid,
    t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel')
  );
}

/**
 * Execute node deletion
 */
function budgets_fund_delete_confirm_submit($form, &$form_state) {
  global $user;

  $node = node_load(array('nid' => $form_state['values']['budget_id']));
  $fund = $node->funds[$form_state['values']['id']];
  $to_mail = explode(',', $node->notification);
  $to_mail[]=$user->mail;
  $to_mail[]=$fund['contributor_email'];

  $log = _guifi_db_delete('budget_funds',
    array('id' => $fund['id'], 'budget_id' => $fund['budget_id']),
    $to_mail);
  $subject = t('Fund for %title from %contributor of %amount deleted by %user.',
    array('%title' => $node->title,
      '%contributor' => $fund['contributor_name'],
      '%amount' => $fund['amount'],
      '%user' => $user->name));

  guifi_notify(
    $to_mail,
    $subject,
    $log);

  drupal_set_message($subject);
  drupal_set_message($log);

  $form_state['redirect'] = 'node/' . $node->id . '/fundings';
}


function budgets_fund_form($form_state, $params = array()) {

  guifi_validate_js("#budgets-fund-form");

  $fid = arg(3);
  $budget = $params;

  if (empty($form_state['values'])) {
    if ($fid == 'contribute') {
      unset($fid);
      $f['new'] = array('#type' => 'hidden', '#value' => TRUE);
    }
    else {
      $fund = $params->funds[$fid];
      $f['id'] = array('#type' => 'hidden', '#value' => $fund['id']);
    }
  }
  $f['budget_id'] = array('#type' => 'hidden', '#value' => $budget->id);
  $f['notification'] = array('#type' => 'hidden', '#value' => $budget->notification);

  guifi_log(GUIFILOG_TRACE, sprintf('function budgets_fund_form(%d)', $fid), $fund);

  if (isset($f['new']))
    $f['fund_status'] = array('#type' => 'hidden', '#value' => 'Submitted');
  else
    $f['fund_status'] = array(
      '#type' => 'select',
      '#title' => t('Status'),
      '#description' => t('Current status of this funding.'),
      '#default_value' => $fund['fund_status'],
      '#options' => drupal_map_assoc(
        array('Submitted', 'Accepted', 'Paid', 'Declined'))
    );

  $f['contributor_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#required' => TRUE,
    '#default_value' => $fund['contributor_name'],
    '#description' => t('Your full name, ' .
        'or if your contribution wants to be anonyomous, ' .
        'something that will identify that the money comes from this donation ' .
        'once is verified.')
  );
  $f['contributor_email'] = array(
    '#type' => 'textfield',
    '#title' => t('e-mail'),
    '#required' => TRUE,
    '#attributes' => array(
      'class' => 'email required'),
    '#default_value' => $fund['contributor_email'],
    '#description' => t('Your email-id. Will be available just to promoters ' .
        'and not published in the reports available to all.')
  );
  $f['contributor_telf'] = array(
    '#type' => 'textfield',
    '#title' => t('Telf'),
    '#default_value' => $fund['contributor_telf'],
    '#description' => t('How promoters can contact you by phone. Will be ' .
        'available just to them and not published at the reports')
  );
  $f['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#size' => 12,
    '#required' => TRUE,
    '#max-length' => 15,
    '#attributes' => array(
      'class' => 'number required',
        'min' => $budget->min_contribution,
        'max' => $budget->max_contribution),
    '#default_value' => $fund['amount'],
    '#description' => t('Amount of the contribution') .
                          '&nbsp;(' . $budget->currency_txt . ').' .
                          '<br />' . $budget->payment_instructions,
  );
  $f['comments'] = array(
    '#type' => 'textarea',
    '#title' => t('Comments'),
    '#default_value' => $fund['comments'],
    '#description' => t('Write here any additional comments ' .
        'about your contribution. ' .
        'Note that in some cases you may donate other things, ' .
        'like reused material, availability to work...')
  );

  if (isset($f['new']))
    $f['terms'] = array(
      '#type' => 'checkbox',
      '#required' => TRUE,
      '#title' => t('Do you accept the Terms & Conditions described below?'),
      '#attributes' => array('class' => 'required'),
      '#description' => $budget->terms,
    );


  $f['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit')
  );
  if (!isset($f['new']))
    $f['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete')
    );
  end($f);
//  $k = key($f);
//  $f[$k]['#suffix'] = l(t('Back'),'node/'.$budget->id.'/view/funds');
  $f['back'] = array(
    '#type' => 'item',
    '#value' => l(t('Back to funds report'), 'node/' . $budget->id . '/view/funds')
  );

  return $f;
}

function budgets_fund_form_submit($form, &$form_state) {
  global $user;

  $to_mail = explode(',', $user->mail);
  $fid = $form_state['values']['id'];
  $fund = &$form_state['values'];
  guifi_log(GUIFILOG_TRACE, sprintf('function budgets_fund_form_submit(%d)', $fid), $form_state);

  if ($form_state['clicked_button']['#value']==t('Delete')) {
    $form_state['redirect'] = 'budgets/' . $fund['budget_id'] . '/delete/' . $fund['id'];
    return;
  }

  $log = '';
  $to_mail[] = $fund['notification'];
  $to_mail[] = $fund['contributor_email'];
  $fid = _guifi_db_sql(
      'budget_funds',
      array('id' => $fund['id'], 'budget_id' => $fund['budget_id']),
      $fund,
      $log, $to_mail);
  if (isset($fund['new']))
    $subject = t('New fund of %amount for %contributor created by %user',
      array('%amount' => $fund['amount'],
        '%contributor' => $fund['contributor_name'],
        '%user' => $user->name));
  else
    $subject = t('Fund of %amount from %contributor updated by %user',
      array('%amount' => $fund['amount'],
        '%contributor' => $fund['contributor_name'],
        '%user' => $user->name));
  drupal_set_message($subject);
  guifi_notify($to_mail,
    $subject,
    $log);
  $form_state['redirect'] = 'node/' . $fund['budget_id'] . '/view/funds';
}

function budgets_fund_set_status($budget, $fund_id, $status) {
  global $user;

  guifi_log(GUIFILOG_TRACE,
    sprintf('function budgets_fund_decline(%d %s)', $fund_id, $status), $budget->title);
  if (!(array_search($status, drupal_map_assoc(array('Paid', 'Accepted', 'Declined'))))) {
    drupal_set_message(t('%status is not a valid fund status',
      array('%status' => $status)));
    drupal_goto('node/' . $budget->id . '/view/funds');
  }

  $fund['id'] = $fund_id;
  $fund['budget_id'] = $budget->id;
  $fund['fund_status'] = $status;

  $subject = t('Funding of %amount by %name set as %status.',
    array('%name' => $budget->funds[$fund_id]['contributor_name'],
      '%amount' => $budget->funds[$fund_id]['amount'],
      '%status' => $status));
  $log = '';

  $to_mail = explode(',', $budget->notification);
  $to_mail[] = $budget->funds[$fund_id]['contributor_email'];
  $to_mail[] = $user->mail;

  _guifi_db_sql('budget_funds',
    array('id' => $fund_id, 'budget_id' => $budget->id),
    $fund,
    $log, $to_mail);

  drupal_set_message($subject);
  guifi_notify($to_mail,
    $subject,
    $log);

  drupal_goto('node/' . $budget->id . '/view/funds');
}

function budgets_items_clean(&$bItems) {
  guifi_log(GUIFILOG_TRACE, 'function budgets_items_clean(ENTER)', NULL);

  if (count($bItems)==0)
    return;

  foreach ($bItems as $k => $bItem) {
    $bItem[comments]    = $bItem[comments]=='&nbsp;' ?
                          NULL : ltrim($bItem[comments]);
    $bItem[description] = $bItem[description]=='&nbsp;' ?
                          NULL : ltrim($bItem[description]);
    $bItem[title]       = ltrim($bItem['title']);
    $bItem[quantity]    = ltrim($bItem['quantity']);
    $bItem[cost]        = floatval(ltrim($bItem['cost']));

    if (empty($bItem[title]) and
        empty($bItem[quantity]) and
        empty($bItem[cost]) and
        empty($bItem[description]) and
        empty($bItem[comments]))
      {

      if (isset($bItem['new']))
        unset($bItems[$k]);
      else
        $bItems[$k]['deleted']=TRUE;

      guifi_log(GUIFILOG_TRACE, 'function budgets_items_clean(EMPTY)', $bItem);
    } else
      guifi_log(GUIFILOG_TRACE, 'function budgets_items_clean(NOT empty)', $bItem);

  }

}
/**
* Implementation of hook_validate().
*/
function budgets_validate(&$node) {
  guifi_log(GUIFILOG_TRACE, 'function budgets_validate()', $node->op);

  if ($node->budget_type == 'none')
    form_set_error('budget_type',
          t('You must specify the budget type'));

  if ((!in_array($node->budget_type,array('none','other','crowdfunding'))) and
      (empty($node->node_id)))
    form_set_error('node_id',
          t('Affected node is mandatory'));

  $bStatusOpt = guifi_types('budget_status',null,null,$node->budget_type);
  if (!array_key_exists($node->budget_status,$bStatusOpt))
    form_set_error('budget_status',
      t('Status (%status) not allowed for %type',
       array('%status'=>$node->budget_status,
         '%type'=>$node->budget_type)));

  if (empty($node->nid)) {
    // Fill default values
    if (empty($node->payment_instructions))
      $node->payment_instructions = budgets_variable("budget_payment");
    if (empty($node->terms))
      $node->terms = budgets_variable("budget_terms");
     if (empty($node->expires)) {
      switch (variable_get("budget_expires", '1q')) {
        case '1w': $dexp = mktime(0, 0, 0, date("m"),    date("d")+7, date("Y"));   break;
        case '2w': $dexp = mktime(0, 0, 0, date("m"),    date("d")+14,date("Y"));   break;
        case '1m': $dexp = mktime(0, 0, 0, date("m")+1,  date("d"),   date("Y"));   break;
        case '2m': $dexp = mktime(0, 0, 0, date("m")+2,  date("d"),   date("Y"));   break;
        case '1q': $dexp = mktime(0, 0, 0, date("m")+3,  date("d"),   date("Y"));   break;
        case '4m': $dexp = mktime(0, 0, 0, date("m")+4,  date("d"),   date("Y"));   break;
        case '1h': $dexp = mktime(0, 0, 0, date("m")+6,  date("d"),   date("Y"));   break;
        case '1y': $dexp = mktime(0, 0, 0, date("m"),    date("d"),   date("Y")+1); break;
      }

      list(
        $node->arrexpires['year'],
        $node->arrexpires['month'],
        $node->arrexpires['day']) = explode(',', date('Y,n,j', $dexp));
    }
    if (empty($node->currency_txt))
      $node->currency_txt = variable_get("budgets_currency_txt", 'Euros');
    if (empty($node->currency_symbol))
      $node->currency_symbol = variable_get("budgets_currency_symbol", '€');
    if (empty($node->min_contribution))
      $node->min_contribution = variable_get("budgets_minimum", 0);
    if (empty($node->max_contribution))
      $node->max_contribution = variable_get("budgets_maximum", 50000);

  }

  if (!empty($node->node_id)) {
    $n = explode('-',$node->node_id);
    if (!is_numeric($n[0]) or (guifi_get_nodename($n[0])==NULL))
        form_set_error('node_id',
          t('%s is not a valid node',array('%s'=>$node->node_id)));
    if ((empty($node->zone_id)) and ($node->node_id>0))
      $node->zone_id = guifi_get_zone_of_node($node->node_id);

  }

  if (!empty($node->ticket_link)) if (!valid_url($node->ticket_link, TRUE)) {
    form_set_error('ticket_link',
      t('The URL %url is invalid. Please enter a fully-qualified URL, such as http://social.guifi.net/node/9876',
        array('%url'=>$node->ticket_link))
    );
  }

  if (($node->budget_type != 'crowdfunding') and
      (empty($node->ticket_link) or $node->priority=='unknown')) {
    drupal_set_message(t('WARNING: Note that related tiquet & priority could be mandatory for expense recognition purposes according to applicable policies'),'warning');
  }

  budgets_items_clean($node->items);

//  guifi_log(GUIFILOG_TRACE,'function budgets_validate(3)',$node);


  // Follow the framework if going to edit other forms
  if (isset($_POST['form_item'])) {
    // If we are adding a new componenet or removing a old one
    // we have to do what the framework would do for us so we don't lose
    // information.
    if (isset($_POST['edit'])) {
      $node = (object) $_POST['edit'];
    }
    $action = array_keys($_POST['form_item']);

    // if not adding an item and no item selected, set error
    // else, goes to item form
    if (($action[0] != 'add') and (!isset($node->item_checked)))
      form_set_error('', t('You must select an item to perform this action'));
    else switch ($action[0]) {
        case 'delete':
          unset($node->items[$node->item_checked]);
          break;
        default:
          budgets_edit_item($node, $action[0]);
          exit(0);
    }
  }
  if (isset($_POST['back_to_form'])) {
    $node->items = $_POST['edit']['items'];
  }

  // validate budget items
  if (!empty($node->items)) foreach ($node->items as $item_id => $item) {
    guifi_log(GUIFILOG_TRACE,'function budgets_validate(4)',$item);
    if ($item['deleted'])
      continue;
    $iDescr = str_replace('&nbsp;','',$item['description']);
    if (empty($iDescr))
      form_set_error('items][' . $item_id . '][description', t('Item description is mandatory'));
    else {
      // Checking if the current text is too similar to the default help text provided
      if ($wpct = budgets_similar_text($item['description'],t(QUOTEHELP),7))
      {
        form_set_error('items][' . $item_id . '][description',
           t('Item description is too similar to the default help text at "...%pct...".
              Please ensure you are replacing the text by following the tips provided',
            array('%pct'=>$wpct)));
      }
    }
    $item['quantity'] = str_replace(',', '.', $item['quantity']);
    if (!empty($item['quantity']) and (!is_numeric($item['quantity'])))
      form_set_error('items][' . $item_id . '][quantity', t('Quantity must be numeric'));
    $item['cost'] = str_replace(',', '.', $item['cost']);
    if (!empty($item['cost']) and (!is_numeric($item['cost'])))
      form_set_error('items][' . $item_id . '][cost', t('Cost must be numeric'));
  }

  // Validating automatic load of elememnts
  if ($node->op=t('Load')) {
    // to fill distance expenses, we do need both origin and destination
    if ($node->drivingDist != t('None')) {
      if (empty($node->node_id))
        form_set_error('node_id', t('Origin must exists to calculate travel expenses'));
    }
  }
}

function budgets_save(&$node) {
  global $user;

  guifi_log(GUIFILOG_TRACE,'function budgets_save()',$node);

  if ($node->node_id>0)
    $node->zone_id = guifi_get_zone_of_node($node->node_id);

  budgets_items_clean($node->items);

  $node->expires = mktime(0, 0, 0,
    $node->arrexpires['month'],
    $node->arrexpires['day'],
    $node->arrexpires['year']
    );
  $node->accdate = mktime(0, 0, 0,
    $node->arraccdate['month'],
    $node->arraccdate['day'],
    $node->arraccdate['year']
    );

  $log = '';
  $bid = _guifi_db_sql(
    'budgets',
    array('id' => $node->nid),
    (array)$node,
    $log, $to_mail);

  foreach ($node->items as $k => $item) {
    if ($item['deleted']) {
      $log .= _guifi_db_delete('budget_items',
        array(
          'id' => $item['id'],
          'budget_id' => $node->nid));
      continue;
    }
    $item['budget_id'] = $node->nid;
    if (is_numeric($item['cost'])) {
      $item['cost'] = str_replace(',', '.', $item['cost']);
      $item['cost'] = floatval($item['cost']);
    }
    guifi_log(GUIFILOG_TRACE,'function budgets_save_item()',$item);
    $iid = _guifi_db_sql(
      'budget_items',
      array('id' => $item['id'], 'budget_id' => $node->nid),
      $item,
      $log, $to_mail);
  }

  guifi_notify(
    $to_mail,
    t('The budget %name has been UPDATED by %user.',
      array('%name' => $node->title, '%user' => $user->name)),
    $log);
//  drupal_set_message($log);

  return $bid;
}

function budgets_insert($node) {
  $node->new = TRUE;
  $node->id = $node->nid;
  budgets_save($node);
}

function budgets_update($node) {
  budgets_save($node);
}

/**
* Implementation of hook_delete().
*/
function budgets_delete(&$node) {
  global $user;

  $to_mail = explode(',', $node->notification);
  $log = _guifi_db_delete('budgets', array('id' => $node->nid), $to_mail);
  drupal_set_message($log);
  guifi_notify(
           $to_mail,
           t('The BUDGET %name has been DELETED by %user.', array('%name' => $node->title, '%user' => $user->name)),
           $log);
  return;
}

function budgets_similar_text($str1, $str2, $wc = 5) {
  //  guifi_log(GUIFILOG_BASIC,"function guifi_similar_text()");

  $w1 = str_word_count(iconv('UTF-8','ASCII//TRANSLIT',html_entity_decode( preg_replace('/<[^>]*>/', '', $str1))),1);
  $w2 = str_word_count(iconv('UTF-8','ASCII//TRANSLIT',html_entity_decode( preg_replace('/<[^>]*>/', '', $str2))),1);
  if (count($w1) < count($w2)) {
    $s1 = $w1; $s2 = $w2;
  } else {
    $s1 = $w2; $s2 = $w1;
  }
 // guifi_log(GUIFILOG_BASIC,"function guifi_similar_text()",$s1);
  $strdest = implode(' ',$s2);
  $i = 0;
  do {
    $substr = implode(' ',array_slice($s1,$i,$wc));
    if (strpos($strdest,$substr))
      return $substr;
    $i++;
  } while ($i < (count($s1)-$wc));

  return FALSE;
}

/**
* Implementation of hook_page().
*/
function budgets_page($zone = NULL, $status = NULL) {
  if (is_numeric($zone))
    $zone = guifi_zone_load($zone);
  guifi_log(GUIFILOG_TRACE, sprintf('function budgets_page(%d)', $zone->id),
    $zone);

  $today=getdate();
  if ($status=='Expired')
    $status_str = "  AND (budget_status='Open' or budget_status='Preparation') and b.expires < " . $today[0] . " " ;
  elseif ($status=='Open' or $status=='Preparation')
    $status_str = "  AND budget_status='". $status ."' and b.expires >= " . $today[0] . " " ;
  elseif ($status!=NULL)
    $status_str = "  AND budget_status='". $status ."' ";
  else
    $status_str = '';

  if (is_null($zone))
    $zone->id = 0;

  $title = t('Proposals & budgets');
  if ($zone->title)
    $title .= ' @ ' . $zone->title;


  drupal_set_title($title);

  $zones = guifi_zone_childs_and_parents($zone->id);

  $sql =
    'SELECT n.nid,b.zone_id
     FROM {node} n, {budgets} b
     WHERE n.nid=b.id
       AND b.zone_id IN (' . implode(',', $zones) . ') ' .
    $status_str .
    'ORDER BY FIND_IN_SET(budget_status,"Open,Preparation,Closed"), n.nid DESC';

  $result = pager_query($sql, variable_get('default_nodes_main', 10));

  $output = '';
  while ($node = db_fetch_object($result)) {
      $output .= node_view(node_load(array('nid' => $node->nid)), TRUE);
  }

  if (empty($output))
    $output = t("Welcome to budget module. " .
        "This module will allow your community to create & manage " .
        "budgets & proposals by allocate costs, and collecting funds for them." .
        "<br>There is currently nothing defined here. Any logged user can create " .
        "new pudgets/proposals by going to the 'Create content' menu option.");
  else
    $output = theme_budgets_page_header($zone) .
      $output .
      theme('pager', NULL, variable_get('default_nodes_main', 10));

  drupal_set_breadcrumb(guifi_zone_ariadna($zone->id, 'budgets/%d/list'));
//  $output .= theme_pager(NULL, variable_get("guifi_pagelimit", 50));
  $node = node_load(array('nid' => $node->id));
  $output .= theme_links(module_invoke_all('link', 'node', $node, FALSE));
  print theme('page', $output, FALSE);
  return;
}

/**
* Implementation of hook_view().
*/
function budgets_view($node, $teaser = FALSE, $page = FALSE) {

  if (!budgets_access('view',$node)) {
    return;
  }

  if (!isset($node->nid))
    $node = node_load(array('nid' => $node->id));

  $node->title = $node->nid .' '.$node->title;

  $node->supplier_id=current(explode('-',$node->supplier_id));
  $node->node_id=current(explode('-',$node->node_id));
  $node->zone_id=current(explode('-',$node->zone_id));

  guifi_log(GUIFILOG_TRACE, 'function budgets_view()',$node);

  node_prepare($node, $teaser);

  if ($page)
    drupal_set_breadcrumb(guifi_zone_ariadna($node->zone_id));

    $node->content['header'] = array(
      '#value' => theme_budgets_header($node, $teaser),
      '#weight' => -10
    );

  if (!$teaser) {
    $node->content['footer'] = array(
      '#value' => theme_budgets_footer($node, $teaser),
      '#weight' => 10
    );
    $node->content['items'] = array(
      '#value' => theme_budgets_items($node),
      '#weight' => 1
    );

  }

  return $node;
}


function budgets_bar($total, $subtotal, $currency = '€') {
  if ($subtotal > 0)
    $pct_green = round( (100*$subtotal) / $total  );
  else
    $pct_green = 0;
  if ($pct_green > 100)
    $pct_green = 100;

  $output .= "\n\r".'<div class="budgets_bar"><div class="bar">';
  $output .= "\n\r".'<div class="foreground" style="width: ' . $pct_green . '%;">';
  $output .= '</div></div>';
  $output .= "\n\r".'<div class="total">' . $pct_green . '% (' . number_format($subtotal, 1, ',', '.') .' '. t('of') .' '. number_format($total, 1, ",", '.') . $currency .')</div></div>';

  return $output;
}

function budgets_check_crowdfunding($budget,$funds = false) {
  if (($budget->budget_status == 'Open') or ($budget->budget_type=='crowdfunding'))
    return true;
  else {
  	$i = db_fetch_object(db_query(
     'SELECT count(id) ' .
     'FROM {budget_funds} ' .
     'WHERE budget_id='.$budget->id)
     );
    if (($i->id) > 1)
      return true;
    else
     return false;
  }
}

function theme_budgets_items($node, $links = FALSE) {

  if (!isset($node->nid))
    $node = node_load(array('nid' => $node->id));

  $total = 0;
  $totaltax = 0;
  if (!empty($node->items)) foreach ($node->items as $item_id => $item) {
    $subtotal = $item['quantity'] * $item['cost'];
    if ($item['tax']>0) {
       $subtotal = $subtotal + ($subtotal * ($item['tax']/100));
       $totaltax = $totaltax + ($subtotal * ($item['tax']/100));
    }
    $total = $total + $subtotal;

    if (!$subtotal and empty($item['title']))
      continue;

    $thsnd = variable_get('guifi_thousand','.');
    $decml = variable_get('guifi_decimal',',');

    $rows[] = array(array('data'=>'<hr>','colspan'=>5));
    $rows[] = array(
      array('data' => $item['title'],       'class' => 'budget-items-title-data','colspan'=>0),
    );
    $rows[] = array(
      array('data' => $item['description'], 'class' => 'budget-items-description-data'),
    );
    $rows[] = array(
      array('data' => $item['comments'],    'class' => 'budget-items-comments-data'),
      array('data' => number_format($item['quantity'], 0, $decml, $thsnd),'class' => 'budget-items-number-data'),
      array('data' => number_format($item['cost'], 2, $decml, $thsnd) . $node->currency_symbol, 'class' => 'budget-items-number-data'),
      array('data' => ($item['tax']>0)?number_format($item['tax'], 0, $decml, $thsnd):t('incl.'),'class' => 'budget-items-number-data'),
      array('data' => number_format($subtotal, 2, $decml, $thsnd) . $node->currency_symbol, 'class' => 'budget-items-subtotal-data')
    );
  }
  $rows[] = array(array('data'=>'<hr>','colspan'=>5));
  $rows[] = array(array('data'=>null,'colspan'=>5));
  $rows[] = array(array('data'=>'<hr>','colspan'=>5));
  $rows[] = array(
    array('data'=>t('Taxes not included in item costs'),'class' => 'budget-items-text-subtotal','colspan'=>4),
    array('data'=>number_format($totaltax, 2, $decml, $thsnd). $node->currency_symbol,'class' =>'budget-items-number-subtotal' ),
  );
  $rows[] = array(
    array('data'=>t('Total'),'class' => 'budget-items-text-total','colspan'=>4),
    array('data'=>number_format($total, 2, $decml, $thsnd). $node->currency_symbol,'class' =>'budget-items-number-total' ),
  );
  $header = array (
    array('data' => t('Description'),   'class' => 'budget-items-description-header'),
    array('data' => t('Units'),         'class' => 'budget-items-number-header'),
    array('data' => t('Cost per unit'), 'class' => 'budget-items-number-header'),
    array('data' => t('Tax %'),         'class' => 'budget-items-number-header'),
    array('data' => t('Subtotal'),      'class' => 'budget-items-number-subtotal'));

  $output .=theme('box',t('Items'),theme('table', $header, $rows));

  if ($links)
    $output .= theme_links(module_invoke_all('link', 'node', $node, FALSE));

  return $output;
}

function theme_budgets_cnml($node) {
  $node = node_load(array('nid' => $node->id));

  guifi_log(GUIFILOG_TRACE, 'function theme_budgets_cnml()', $node);

  $output = '<div id="guifi">';
  $output .= '<h2>'. t('Zone %zname%', array('%zname%' => $node->title)) .'</h2>';
  $output .= '<p>'. t('You must specify which data do you want to export, ' .
      'the following options are available:') .'</p>';

  $output .= '<ul>';
  $output .= '<li>'. t('All status') .' ('.
      l(t('short format'), 'budgets/'. $node->nid .'/cnml/short/All') .', '.
      l(t('long format'), 'budgets/'. $node->nid .'/cnml/long/All') .
      ')</li>';
  $output .= '<li>'. t('Open') .' ('.
      l(t('short format'), 'budgets/'. $node->nid .'/cnml/short/Open') .', '.
      l(t('long format'), 'budgets/'. $node->nid .'/cnml/long/Open') .
      ')</li>';
  $output .= '<li>'. t('Preparation') .' ('.
      l(t('short format'), 'budgets/'. $node->nid .'/cnml/short/Preparation') .', '.
      l(t('long format'), 'budgets/'. $node->nid .'/cnml/short/Preparation') .
      ')</li>';
  $output .= '<li>'. t('Closed') .' ('.
      l(t('short format'), 'budgets/'. $node->nid .'/cnml/short/Closed') .', '.
      l(t('long format'), 'budgets/'. $node->nid .'/cnml/long/Closed') .
      ')</li>';
  $output .= '</ul>';

  $output .= '<p>'. t('The <b>C</b>ommunity <b>N</b>etwork <b>M</b>arkup <b>L</b>anguage (<a href="'. base_path() .'node/3521">CNML</a>) is a XML format to interchange network information between services or servers.') .'</p>';
  $output .= '<p>'. t('<b>IMPORTANT LEGAL NOTE:</b> This network information is under the <a href="http://guifi.net/ComunsSensefils/">Comuns Sensefils</a> license, and therefore, available for any other network under the same licensing. If this is not your case, you should ask for permission before using it.</a>') .'</p>';
  $output .= "</div>";

  return $output;
}

function theme_budgets_funds($node, $links = FALSE) {

  guifi_log(GUIFILOG_TRACE, 'function theme_budgets_funds()', $node);

  if (!isset($node->nid))
    $node = node_load(array('nid' => $node->id));

  drupal_set_title(t('Contributions to') .': '. $node->title);

  $output .= '<h2>'. t('Fundings') .'</h2>';

  $total = 0;
  $totals = array();

  // Going to report the funds
  $rows[0] = array(
    theme_strong(t('Date')),
    theme_strong(t('Name')),
    array('data' => theme_strong(t('Amount')), 'align' => 'right'),
    array('data' => theme_strong(t('Status')), 'align' => 'right')
  );
  if (budgets_access('update', $node))
    $rows[0] = array_merge(array(theme_strong(t('Action'))), $rows[0]);

  if (empty($node->funds)) {
    $rows[] = array(t('There are no contributions to this project yet'),
      array('data' => 0, 'align' => 'right'));
  }
  else {
    foreach ($node->funds as $fund_id => $fund) {

      if (isset($totals[$fund['fund_status']]))
        $totals[$fund['fund_status']] += $fund['amount'];
      else
        $totals[$fund['fund_status']] = $fund['amount'];

      if ($fund['fund_status'] != 'Declined')
        $total = $total + $fund['amount'];

      $row = array(
        format_date($fund['timestamp_created'], 'small'),
        $fund['contributor_name'],
        array('data' => number_format($fund['amount'], 2, ',', '.') .
          $node->currency_symbol,
          'align' => 'right'),
        array('data' => $fund['fund_status'], 'align' => 'right'));

      if (budgets_access('update', $node)) {
        $b = '<pre>';
        if ($fund['fund_status'] == 'Submitted')
          $b .= l(guifi_img_icon('ok.png'),
               'budgets/'. $node->id .'/fund/'. $fund['id'] .'/Accepted',
               array(
                 'attributes' => array('title' => t('Accept this funding')),
                 'html' => TRUE));
        $b .= l(guifi_img_icon('edit.png'),
               'budgets/'. $node->id .'/edit/'. $fund['id'],
               array(
                 'attributes' => array('title' => t('Edit this funding')),
                 'html' => TRUE));
        if (!array_search($fund['fund_status'], array('dummy', 'Declined', 'Paid')))
          $b .= l(guifi_img_icon('money.png'),
               'budgets/'. $node->id .'/fund/'. $fund['id'] .'/Paid',
               array(
                 'attributes' => array('title' => t('Mark the payment as done for this funding')),
                 'html' => TRUE));
        if (!array_search($fund['fund_status'], array('dummy', 'Declined', 'Paid')))
          $b .= l(guifi_img_icon('drop.png'),
               'budgets/'. $node->id .'/fund/'. $fund['id'] .'/Declined',
               array(
                 'attributes' => array('title' => t('Decline this funding')),
                 'html' => TRUE));
        $b .= '</pre>';


        $rows[] = array_merge(array($b), $row);
      }
      else
        $rows[] = $row;

      if (!empty($fund['comments']))
        $rows[] = array(NULL,
          array('data' => $fund['comments'], 'colspan' => 4));

    } // foreach fund
  } // if there are funds

  $rows[] = array(
                 '<strong>Total</strong',
                 array('data' =>
                   '<strong>'. number_format($total, 2, ',', '.') . $budget->currency_symbol .'</strong>',
                   'align' => 'right',
                   'colspan' => 4),
                 );
  foreach ($totals as $k => $v) {
    $rows[] = array(NULL,
                $k, array('data' =>
                  number_format($v, 2, ',', '.') . $budget->currency_symbol,
                  'align' => 'right',
                  'colspan' => 3),
              );
  }

  $output .= theme('table', $header, $rows);

  if ($links)
    $output .= theme_links(module_invoke_all('link', 'node', $node, FALSE));

  return $output;

}

function budgets_validate_fund(&$fund) {
  if (($fund['amount'] < $fund['min_contribution']) or (empty($fund['amount'])) )
  form_set_error('amount', t('Minimum donation is') .'&nbsp;'. $fund['min_contribution']);
  if (($fund['amount'] > $fund['max_contribution']) or (empty($fund['amount'])) )
    form_set_error('amount', t('Maximum donation is') .'&nbsp;'. $fund['max_contribution']);
  $fund['amount'] = str_replace(',', '.', $fund['amount']);
  $fund['amount'] = str_replace('€', NULL, $fund['amount']);
  $fund['amount'] = str_replace('$', NULL, $fund['amount']);
  $fund['amount'] = str_replace('EUR', NULL, $fund['amount']);
  $fund['amount'] = str_replace('euros', NULL, $fund['amount']);
  $fund['amount'] = str_replace('USD', NULL, $fund['amount']);
  $fund['amount'] = str_replace('dollars', NULL, $fund['amount']);
  if (!is_numeric($fund['amount']))
  form_set_error('amount', t('Amount must be numeric'));
  if ( (empty($fund['contributor_telf'])) and (empty($fund['contributor_email'])) )
  form_set_error('contributor_email', t('You must provide at least telf. or email for payment verification purposes'));
  if (empty($fund['contributor_name']))
  form_set_error('contributor_name', t('Name is mandatory'));
  if (($fund['agree']) != 1)
  form_set_error('agree', t('You must accept the Terms & Conditions'));
  if (!empty($fund['contributor_email'])) {
    if (!valid_email_address($fund['contributor_email']))
    form_set_error('contributor_email', t('You must use a valid email address'));
  }
}

function budgets_list_totals($subtotals,$vars) {
  $rows = array();

  $node = node_load($vars['id'][0]);
  if ($node->type == 'guifi_zone')
    $vars['zone_id'][0] = $node->nid;

  if (!empty($vars['zone_id'][0]))
    $t_app .= ' - '.l(guifi_get_zone_name($vars['zone_id'][0]),
      'node/'.$vars['zone_id'][0].'/view/budgets');
  else
    $t_app = '';

  if (!empty($vars['location_id'][0]))
    $t_app .= ' - '.l(guifi_get_nodename($vars['location_id'][0]),
      'node/'.$vars['location_id'][0].'/view/nodebudgets');

  if (count($subtotals) > 0) {
    $ttotal = 0;
    foreach($subtotals as $s => $stotal) {
      if ($s>1) {
        $sup=budgets_supplier_load($s);
        $ssup = l($s.'-'.$sup->title,'node/'.$s.'/budgets');
      } else
        $ssup = t('No supplier defined');

      $rows[] = array(
        array('data'=>$ssup,'class' =>'budget-items-number-data'),
        array('data'=>number_format($stotal, 2, $decml, $thsnd). $budget->currency_symbol,
          'class' =>'budget-items-number-data'),
      );
      $ttotal += $stotal;
    }
    if (count($subtotals) > 1)
      $rows[] = array(
        array('data'=>t('Total'),'class' =>'budget-items-text-total'),
        array('data'=>number_format($ttotal, 2, $decml, $thsnd). $budget->currency_symbol,
          'class' =>'budget-items-number-total'),
      );
    return theme('box',t('Totals by supplier').$t_app,theme('table',null,$rows));
  }
  return t('Nothing to list');
}

function budgets_list_monthly_totals($subtotals,$time_subtotals,$vars) {
  $node = node_load($vars['id'][0]);

  guifi_log(GUIFILOG_TRACE,'budgets_list_monthly_totals',$vars);

  $title_app = '';
  if (($vars['from']['year']==$vars['to']['year']) and
      ($vars['from']['month']==$vars['to']['month']))
    return '';

  $title_app = t('History from: %from to %to<br><br>',
     array(
       '%from'=>$vars['from']['day'].' '.
         t(date('M',mktime(0,0,0,$vars['from']['month'],1,2000))).' '.
         $vars['from']['year'],
       '%to'=>$vars['to']['day'].' '.
         t(date('M',mktime(0,0,0,$vars['to']['month'],1,2000))).' '.
         $vars['to']['year'])
     );

  // totals by year, month and supplier
  $rows = array();
  $output = '';
  if (count($time_subtotals) > 0) {
  	ksort($time_subtotals);
  	foreach ($time_subtotals as $y => $year) {
 	  $mrows = array();
 	  $sT = 0;
  	  foreach ($subtotals as $s => $stotal) {
        $ls='details='.$vars['details'][0].
                  ',types='.implode('|',$vars['types']).
                  ',status='.implode('|',$vars['status']).
                  ',id='.$vars['id'][0];
        if (($node->type=='guifi_zone') or (isset($vars['zone_id'][0]))) {
          $z = (isset($vars['zone_id'][0])) ? $vars['zone_id'][0] : $vars['id'][0];
          $ls .= ',zone_id='.$z;
        }

        if (($node->type=='guifi_node') or (isset($vars['location_id'][0])))
          $ls .= ',location_id='.$vars['location_id'][0];

        $nd_url = 'node/'.$vars['id'][0].'/view/budgets/nd=1,'.$ls;
        if ($s>1) {
          $sup=budgets_supplier_load($s);
          $v=$vars;
          $ssup = l($s.'-'.$sup->title,'node/'.$s.'/budgets/'.$ls.
            ',from='.$y.'|1|1,to='.$y.'|12|31,nd=0,url=budgets');
        } else {
          $ssup = l(t('No supplier defined'),$nd_url.
            ',from='.$y.'|1|1,to='.$y.'|12|31,nd=1,url=view^budgets');
          $v = null;
        }
        $mrow = array();
        $mrow[] = array('data'=>$ssup);
        $has_value = false;

   	    $month = 1;

        $st = 0;
    	do {
          if (isset($time_subtotals[$y][$month]))
            if (isset($time_subtotals[$y][$month][$s])) {
              $t_url = ',from='.$y.'|'.$month.'|1'.
                  ',to='.$y.'|'.$month.'|'.date('t',mktime(0,0,0,$month,1,$y));
              if (is_null($v))
                $mrow[]=array('data'=>
                  l(number_format($time_subtotals[$y][$month][$s],2,$decml,$thsnd). $budget->currency_symbol,
                  $nd_url . $t_url . ',url=view^budgets'),
                  'class' =>'budget-items-number-data');
              else {
              	$ls .= $t_url;
                 $mrow[]=array('data'=>
                   l(number_format($time_subtotals[$y][$month][$s],2,$decml,$thsnd). $budget->currency_symbol,
                     'node/'.$s.'/budgets/'.$ls. $t_url. ',url=budgets'),
                  'class' =>'budget-items-number-data');
              }
              $has_value = true;
              $st += $time_subtotals[$y][$month][$s];
            } else
              $mrow[] = array('data'=>'-','class' =>'budget-items-number-data');
          else
            $mrow[] = array('data'=>'-','class' =>'budget-items-number-data');
     	  $month++;
    	} while ($month < 13);
        if ($has_value) {
          $sT += $st;
          $mrow[] = array('data'=>number_format($st,2,$decml,$thsnd). $budget->currency_symbol,'class' =>'budget-items-number-data');
          $mrows[] = $mrow;
        }
  	  }
//  	  if (count($mrows) > 1) {
  	    $mrows[] = array(
  	       array('data'=>'','colspan'=>13),
  	       array('data'=>number_format($sT,2,$decml,$thsnd). $budget->currency_symbol,'class' =>'budget-items-number-total')
  	       );
//  	  }
      $mh = array(
        array('data'=>'Supplier'),      );
      foreach (array('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec','Total') as $monthstr)
        $mh[] = array('data'=>t($monthstr),'class'=>'budget-items-number-header');
      $title = $title_app.t('Monthly totals for year %year',array('%year'=>$y));
      $title_app='';
      $output .= theme('box',$title,theme('table',$mh,$mrows));
  	} // foreach year
  } // if there are time_sutotals
  return $output;
}

function budgets_list_form($parm,$keys=null) {
  guifi_log(GUIFILOG_TRACE,'budgets_list_form',$keys);

  /*
   * Filter form
   */

  $form['filter'] = array(
    '#attributes' => array('class'=>"query-form"),
    '#title'=> t('Filters'),
    '#type'=>'fieldset',
    '#tree'=>false,
    '#collapsed'=>false,
    '#collapsible'=>true,
  );
  $form['filter']['details'] = array(
    '#type'=>'radios',
    '#title'=>t('Detail'),
    '#options'=>array(
        'detailed'=>t('Totals & details'),
        'totals'=>t('Totals only'),
      ),
    '#default_value'=>$keys['details'][0],
  );
  $form['filter']['types'] = array(
    '#type'=>'select',
    '#title'=>t('Type'),
    '#options'=>guifi_types('budget_type'),
    '#multiple'=>true,
    '#size'=>8,
    '#default_value'=>$keys['types'],
  );
  $form['filter']['status'] = array(
    '#type'=>'select',
    '#title'=>t('Status'),
    '#options'=>guifi_types('budget_status'),
    '#multiple'=>true,
    '#size'=>8,
    '#default_value'=>$keys['status'],
  );
  $form['filter']['from'] = array(
    '#type'=>'date',
    '#title'=>t('From'),
    '#default_value'=>$keys['from'],
    '#prefix'=> '<div class="budgets-zone-form">',
  );
  $form['filter']['to'] = array(
    '#type'=>'date',
    '#title'=>t('To'),
    '#default_value'=>$keys['to'],
//    '#suffix'=> '</div>',
  );
  $form['filter']['orderby'] = array(
    '#type'=>'select',
    '#title'=>t('Order by'),
    '#default_value'=>$keys['orderby'],
    '#options'=>array('accdate'=>t('Due date'),'created'=>t('Created'),'changed DESC'=>t('Updated (DESC)')),
  );

  if (!empty($keys['zone_id'][0])){
  	$opts = array(0=> t('All'),$keys['zone_id'][0]=>guifi_get_zone_name($keys['zone_id'][0]));
    $form['filter']['zone_id'] = array(
      '#type'=>'select',
      '#title'=>t('Zone'),
      '#options'=>$opts,
      '#default_value'=>$keys['zone_id'][0],
    );
  }
  if (!empty($keys['location_id'][0])){
  	$opts = array(0=> t('All'),$keys['location_id'][0]=>guifi_get_nodename($keys['location_id'][0]));
    $form['filter']['location_id'] = array(
      '#type'=>'select',
      '#title'=>t('Location'),
      '#options'=>$opts,
      '#default_value'=>$keys['location_id'][0],
    );
  }

  if ($keys['nd'][0]==1)
    $form['filter']['nd'] = array(
      '#type'=>'checkbox',
      '#title'=>t('No supplier defined'),
      '#default_value'=>$keys['nd'][0],
      '#suffix'=> '</div>',
    );
  else
    $form['filter']['nd'] = array('#type'=>hidden,'#value'=>$keys['nd'][0],'#suffix'=> '</div>');

  $form['filter']['id'] = array('#type'=>hidden,'#value'=>$keys['id'][0]);
  $form['filter']['url'] = array('#type'=>hidden,'#value'=>str_replace("/","^",$keys['url'][0]));
  $form['filter']['submit'] = array(
    '#type'=>'submit',
    '#title'=>t('Press to proceed'),
    '#value'=>t('Filter'),
//    '#suffix'=> '</td></table>',
  );

  return $form;
}

function budgets_list_form_submit($form_id, &$form_values) {
  $v=$form_values['values'];
  guifi_log(GUIFILOG_TRACE,'SUBMIT',$v);

  if (isset($v['zone_id'])) {
    $s = 'zone_id='.$v['zone_id'].
      ',id='.$v['id'];
  } else
    $s = 'id='.$v['id'];

  if (isset($v['location_id']))
    $s .= ',location_id='.$v['location_id'];

  $s.=',details='.$v['details'].
    ',types='.implode('|',$v['types']).
    ',status='.implode('|',$v['status']).
    ',from='.$v['from']['year'].'|'.$v['from']['month'].'|'.$v['from']['day'].
    ',to='.$v['to']['year'].'|'.$v['to']['month'].'|'.$v['to']['day'].
    ',nd='.$v['nd'].
    ',orderby='.$v['orderby'].
    ',url='.$v['url'];

  if (isset($v['zone_id']))
    $s .= ',zone_id='.$v['zone_id'];

  drupal_goto('node/'.$v['id'].'/'.str_replace("^","/",$v['url']).'/'.$s);
}

function budgets_by_node($node,$params=null) {
  guifi_log(GUIFILOG_TRACE,'budgets_by_node',$params);

  $btypes=guifi_types('budget_type');
  $bstatus=guifi_types('budget_status');

  if (empty($params)) {
    $vars['details'][0]='detailed';
    $vars['url'][0]='view/nodebudgets';
    $vars['types']=array_keys($btypes);
    $vars['status']=array_keys($bstatus);
    $vars['nd'][0]=false;
    $vars['from']=array_combine(array('year','month','day'),explode(' ',date('Y n j',time()-(60*60*24*729))));
    $vars['to']=array_combine(array('year','month','day'),explode(' ',date('Y n j')));
    $vars['orderby'][0]='accdate';
    $p=explode(',',$params);
    foreach ($p as $v) {
      $v=explode('=',$v);
      if (($v[0]=='from') or ($v[0]=='to'))
        $vars[$v[0]]=array_combine(array('year','month','day'),explode('|',$v[1]));
      else
        $vars[$v[0]]=explode('|',$v[1]);
    }
  }
  $vars['id'][0]=$node->id;
  $vars['location_id'][0]=$node->id;
  $vars['zone_id'][0]=guifi_get_zone_of_node($node->id);

  $zone = guifi_zone_load($vars['zone_id'][0]);

  guifi_log(GUIFILOG_TRACE,'budgets_by_node (vars)',$vars);

  return budgets_by_zone($zone,$vars);
}

function budgets_by_zone($zone,$params=null) {
  guifi_log(GUIFILOG_TRACE,'budgets_by_zone',$zone->id);

  $btypes=guifi_types('budget_type');
  $bstatus=guifi_types('budget_status');

  if (empty($params)) {
    $vars['details'][0]='detailed';
    $vars['url'][0]='view/budgets';
    $vars['types']=array_keys($btypes);
    $vars['status']=array_keys($bstatus);
    $vars['nd'][0]=false;
    $vars['id'][0]=$zone->id;
    $vars['from']=array_combine(array('year','month','day'),explode(' ',date('Y n j',time()-(60*60*24*729))));
    $vars['to']=array_combine(array('year','month','day'),explode(' ',date('Y n j')));
    $vars['orderby'][0]='accdate';
  } else if (is_array($params)) {
  	  $vars = $params;
    } else {
      $p=explode(',',$params);
      foreach ($p as $v) {
        $v=explode('=',$v);
        if (($v[0]=='from') or ($v[0]=='to'))
          $vars[$v[0]]=array_combine(array('year','month','day'),explode('|',$v[1]));
        else
          $vars[$v[0]]=explode('|',$v[1]);
    }
  }

  guifi_log(GUIFILOG_TRACE,'budgets_by_zone (vars)',$vars);

  $output = drupal_get_form('budgets_list_form',$vars);

  $zroot = guifi_bg_zone_root();
  if (($zone->id==0) or (empty($zone->id))) {
    $zone->id=$zroot;
  }

  $zlist = guifi_zone_childs($zone->id);

  if ($zone->id == $zroot)
    $where = ' ';
  else
    $where = ' AND (b.zone_id IN ('.implode(',',$zlist).')) ';

  if (isset($vars['location_id'][0]))
    $where = ' AND (b.node_id) = '.$vars['location_id'][0].' ';

  else
    $where = ' AND (b.zone_id IN ('.implode(',',$zlist).')) ';

  if ($vars['nd'][0]==1)
    $where .= " AND b.supplier_id = 0 ";

  if ($vars['types'])
    $where .= " AND b.budget_type in ('".implode("','",$vars['types'])."') ";
  if ($vars['status'])
    $where .= " AND b.budget_status in ('".implode("','",$vars['status'])."') ";

  $f = mktime(0,0,0,$vars['from']['month'],$vars['from']['day'],$vars['from']['year']);
  $where .= sprintf(' AND IFNULL(b.accdate,b.expires) >= %d',$f);
  $t = mktime(23,59,59,$vars['to']['month'],$vars['to']['day'],$vars['to']['year']);
  $where .= sprintf(' AND IFNULL(b.accdate,b.expires) <= %d ',$t);

  $qquery =
    'SELECT b.id, b.accdate ' .
    'FROM {budgets} b, {node} n ' .
    'WHERE b.id=n.nid ' .
    ' AND n.status=1 '.
    $where.
    // Order by rating, creating a code for sort the trend:
    //  ''+''=0, ''=1, '-'=2
    'ORDER BY '.$vars[orderby][0];

  guifi_log(GUIFILOG_TRACE,'list_by_zone (budgets query)',$qquery);

  $query = db_query($qquery);

  $subtotals = array();
  $time_subtotals = array();

  while ($b = db_fetch_object($query)) {
    $budget = node_load(array('nid' => $b->id));

    $subtotals[$budget->supplier_id] += $budget->total;
    if (is_null($b->accdate))
      $tdate=$budget->expires;
    else
      $tdate=$budget->accdate;
    $time_subtotals[date('Y',$tdate)][date('n',$tdate)] [$budget->supplier_id] += $budget->total;

//    guifi_log(GUIFILOG_BASIC,'list_by_zone (var)',$var['details'][0]);
    if (budgets_access('view',$budget))
      if ($vars['details'][0]=='detailed')
        $doutput .= node_view($budget, TRUE, FALSE, TRUE);
  }

  $output .= budgets_list_totals($subtotals,$vars).
    budgets_list_monthly_totals($subtotals,$time_subtotals,$vars).
    $doutput;

  drupal_set_breadcrumb(guifi_zone_ariadna($zone->id,'node/%d/view/budgets'));
//  $output .= theme_pager(NULL, variable_get("guifi_pagelimit", 50));
//  $node = node_load(array('nid' => $zone->id));
//  $output .= theme_links(module_invoke_all('link', 'node', $node, FALSE));
  print theme('page',$output, FALSE);
  return;
}

function budgets_add_batch($provider) {

  guifi_log(GUIFILOG_TRACE, 'function budgets_add_batch(provider)',$provider);

  $output = drupal_get_form('budgets_batch_form','batch_budgets',$provider);

  return $output;
}

function budgets_add_batch_review($provider,$tmpId) {

  guifi_log(GUIFILOG_TRACE, 'function budgets_add_batch_review(provider)',$provider);
  guifi_log(GUIFILOG_TRACE, 'function budgets_add_batch_review(tmpId)',$tmpId);

  $output = drupal_get_form('budgets_batch_form_review','batch_review',$provider,$tmpId);

  return $output;
}

function budgets_batch_form_review(&$form_state, $from = NULL, $provider, $tmpId) {
  guifi_log(GUIFILOG_TRACE, 'function budgets_batch_form_review(tmpId)',$tmpId);
  guifi_log(GUIFILOG_TRACE, 'function budgets_batch_form_review(from)',$from);
  guifi_log(GUIFILOG_TRACE, 'function budgets_batch_form_review(foem_state)',$form_state);

  $fname=file_directory_temp().'/'.$tmpId.'.tmp';
  $fp = fopen($fname,"r");
  $strBudgets = fread($fp, filesize($fname));
  fclose($fp);

  $budgets = unserialize($strBudgets);

  if (empty($budgets)) {
    drupal_set_message(t('Budgets to be loaded not found.'),'error');
    drupal_goto('node/'.arg(1).'/budgets/batch');
  }

  if (!isset($form_state[post][Upload]))
    drupal_set_message(t('Review the %budgets budgets to be loaded<br>'.
      'Once reviewed, to confirm the load, click to the button below',array('%budgets'=>count($budgets))),'info');

  $minAccdate = time();
  $maxAccdate = 0;
  foreach ($budgets as $key => $budget) {
    if (!isset($form_state[post][Upload]))
      drupal_set_message(theme_budgets_batch($budget),'info');
    list($y,$m,$d) = explode('-',$budget[accdate]);
    $accdate = mktime(0,0,0,$m,$d,$y);
    if ($accdate > $maxAccdate)
      $maxAccdate = $accdate;
    if ($accdate < $minAccdate)
      $minAccdate = $accdate;
  }

  $form['upload'] = array('#type' => 'submit', '#value' => t('Confirm'),'#name'=>'Upload',
    '#executes_submit_callback' => TRUE,
    '#submit' => array('budgets_batch_form_confirm'),
    );

  $form['tmpId'] = array('#type'=>'hidden','#value'=>$tmpId);

  $form['#attributes']['enctype'] = 'multipart/form-data';

  $btypes=guifi_types('budget_type');
  $kbtypes = array_keys($btypes);
  $parms='details=detailed,types='.implode('|',$kbtypes).',status=Preparation,from='.
    date("Y|m|d",$minAccdate).',to='.date("Y|m|d",$maxAccdate).
    ',orderby=accdate,url=budgets';

  $form['#redirect'] = 'node/'.$provider->id.'/budgets/'.$parms;

  return $form;
}

function budgets_batch_form_confirm($form_id, &$form_values) {

  guifi_log(GUIFILOG_TRACE, 'function budgets_batch_form_confirm(values)',$form_values['values']);

  $tmpId = $form_values[values][tmpId];

  $fname=file_directory_temp().'/'.$tmpId.'.tmp';
  $fp = fopen($fname,"r");
  $strBudgets = fread($fp, filesize($fname));
  fclose($fp);

  $budgets = unserialize($strBudgets);

  if (empty($budgets)) {
    drupal_set_message(t('Budgets to be loaded not found.'),'error');
    drupal_goto('node/'.arg(1).'/budgets/batch');
  }

  drupal_set_message(t('%budgets budgets loaded',
    array('%budgets'=>count($budgets))),'info');

  // Saving into the database
  foreach ($budgets as $key => $budgetArr) {
    $budget = array2object($budgetArr);
    $info = '*** Loaded from CSV';
    if (!empty($budget->key))
      $info .= ', key: '.$budget->key;
    $budget->new = true;
    list($budget->arraccdate['year'],
      $budget->arraccdate['month'],
      $budget->arraccdate['day']) = explode('-',$budget->accdate);
    $budget->arrexpires = $budget->arraccdate;
    if (empty($budget->budget_type))
      $budget->budget_type = 'none';
    $budget->body = $info.'<br>'.$budget->body;
    foreach ($budget->items as $k => $item)
      $budget->items[$k]['new'] = true;

    node_save($budget);
  }
  return $form;
}

function budgets_batch_form_validate($form_id, $form) {
  $values = $form['values'];
  guifi_log(GUIFILOG_TRACE, 'function budgets_batch_form_validate(var1)',$_FILES['files']['size']['csv_file_header']);
  guifi_log(GUIFILOG_TRACE, 'function budgets_batch_form_validate(var2)',$values);
  if (empty($_FILES['files']['size']['csv_file_header']))
    form_set_error('csv_file_header',t('Header file can\'t be empty'));
  if ($values['headertitle']=='')
    form_set_error('headertitle',t('Title at header is mandatory'));
  if ($values['headerbody']=='')
    form_set_error('headerbody',t('Body at header is mandatory'));
  if ($values['headerdate']=='')
    form_set_error('headerdate',t('Date at header is mandatory'));

  if (!empty($_FILES['files']['size']['csv_file_items'])) {
    if ($values['headerkey']=='')
      form_set_error('headerkey',t('Key must exist at header file for loading items'));
    if ($values['itemkey']=='')
      form_set_error('itemkey',t('Key must exist at items file for loading items'));
    if ($values['itemtitle']=='')
      form_set_error('itemtitle',t('Title at items is mandatory'));
  }
}

function budgets_batch_form(&$form_state, $from = NULL, $provider) {
  guifi_log(GUIFILOG_TRACE, 'function budgets_batch_form(provider)',$provider);
  /*
   * Provider
   */
  $form['provider'] = array(
    '#type' => 'item',
    '#title' => t('Supplier'),
    '#disabled' => true,
    '#description' => t('Quotes will be loaded to this provider'),
    '#value' => l($provider->id.'-'.$provider->title,'node/'.$provider->id),
    '#prefix' => '<table><td>',
  );
  $form['supplier'] = array(
    '#type' => 'hidden',
    '#value' => $provider->id.'-'.$provider->title,
  );

  /*
   * File format
   */
  $form['format'] = array(
    '#type'=>'fieldset',
    '#title'=>t('File format'),
    '#description'=>t('Describe the mcapping between the source file and target fields'),
    '#collapsible'=>true,
    '#collapsed'=>false,
    '#tree'=>false,
    '#attributes'=>array('class'=>'budget-item'),
  );

  $form['format']['delimiter'] = array(
    '#type'=> 'select',
    '#title'=>t('Delimiter'),
    '#description'=>t('Field delimiter character'),
    '#default_value'=>chr(9),
    '#options'=> array(
      ';'=>'semi-colon (;)',
      ','=>'comma (,))',
      ':'=>'colon (:)',
      '.'=>'dot (,)',
      '|'=>'pipe (|)',
      '·'=>'middle-dot (·)',
      chr(9)=>'tab',
    ),
  );
  $form['format']['skip'] = array(
    '#type'=> 'textfield',
    '#size'=>4,
    '#maxlength'=>10,
    '#title'=>t('Skip'),
    '#description'=>t('Lines from the beginning'),
    '#default_value'=>'0',
  );
  $form['format']['inBody'] = array(
    '#type'=> 'checkbox',
    '#title'=>t('Items in Bdoy'),
    '#description'=>t('Load items at the budget body instead of items'),
    '#default_value'=> true,
  );

  /*
   * Field mapping
   */
  $fieldsHeader=array(
    'key'=>t('Key'),
    'title'=>t('Title'),
    'body'=>t('Body'),
    'date'=>t('Date'),
    'node_id'=>t('Node'),
    'budget_type'=>t('Type'),
    'priority'=>t('Priority'),
    'tiquet_link'=>t('Ticket'),
  );
  $fieldsItem=array(
    'key'=>t('Key'),
    'title'=>t('Title'),
    'description'=>t('Description'),
    'comments'=>t('Comments'),
    'quantity'=>t('Quantity'),
    'cost'=>t('Cost'),
    'tax'=>t('Tax'),
  );
  $title=t('Source');
  $options=array(
    ''=>t('Not present'),
    0=>t('First (1st)'),
    1=>t('Second (2nd)'),
    2=>t('Third (3rd)'),
    3=>t('Fourth (4th)'),
    4=>t('Fiveth (5th)'),
    5=>t('Sexth (6th)'),
    6=>t('Seventh (7th)'),
    7=>t('Eighth (8th)'),
    8=>t('Nineth (9th)'),
    9=>t('Tenth (10th)'),
    10=>('eleventh (11th)'),
    11=>('twelfth (12th)'),
    12=>('thirteenth (13th)'),
    13=>('fourteenth (14th)'),
    14=>('fifteenth (15th)')
  );
  $count = 0;
  $totalv = count($fieldsHeader);

  $currItem = reset($fieldsItem);
  $currHeader = reset($fieldsHeader);

  do {
    $prefix = ''; $suffix = '';
  	if ($count == 0) {
  	  $prefix = '<div class=certs><table class="table-csv"><tr><th colspan="2" class="th-center">'.
  	    t('Headers').'</th><th colspan="2" class="th-center">'.t('Items').'</th></tr></tr><th width="10%">'.
        $title.'</th><th width="50%">'.t('Targets to').'</th><th width="10%">'.$title.'</th><th width="50%">'.t('Targets to').'</th></tr>';
  	}
  	if ($count == ($totalv - 1))
	  $suffix = '</table></div>';

  	if ($currHeader)
  	  $form['format']['header'.key($fieldsHeader)] = array(
        '#type' => 'select',
        '#options'=>$options,
        '#default_value' => $count,
        '#attributes'=>array('class'=>"cert-field"),
        '#prefix' => $prefix.'<tr><td>',
        '#suffix' =>  '</td><td>'.$currHeader.'</td>',
      );
    else
       $form['format']['dummy'] = array(
  	     '#type'=>'hidden',
  	     '#value'=> null,
         '#prefix' => $prefix.'<tr><td>',
         '#suffix' =>  '</td><td>&nbsp;</td>',
  	   );
  	if ($currItem) {
  	  $form['format']['item'.key($fieldsItem)] = array(
        '#type' => 'select',
  	    '#options'=>$options,
        '#default_value' => $count,
        '#attributes'=>array('class'=>"cert-field"),
        '#prefix' =>  '<td>',
        '#suffix' =>  '</td><td>'.$currItem.'</td></tr>',
      );
  	} else
  	   $form['format']['dummy'] = array(
  	     '#type'=>'hidden',
  	     '#value'=> null,
         '#prefix' => $prefix.'<td>',
         '#suffix' =>  '</td><td>&nbsp;</td></tr>',
  	   );

     $count++;
  	$currItem = next($fieldsItem);
  	$currHeader = next($fieldsHeader);
  } while (($currItem) or ($currHeader));

  /*
   * Files to upload
   */
  $form['format']['csv_file_header'] = array(
    '#type' => 'file',
    '#title' => t('Header CSV File'),
    '#description' => t('CSV format to be uploaded'),
 //   '#default_value'   => null,
 //   '#required' => true,
    '#prefix' => '<tr><td colspan="2">',
    '#suffix' =>  '</td>',
  );
  $form['format']['csv_file_items'] = array(
    '#type' => 'file',
    '#title' => t('Items CSV File'),
    '#description' => t('CSV format to be uploaded'),
 //   '#default_value' => null,
    '#prefix' => '<td colspan="2">',
    '#suffix' => '</td></tr></table>',
  );
  $form['upload'] = array('#type' => 'submit', '#value' => t('Upload'),'#name'=>'Upload',
    '#executes_submit_callback' => TRUE,
    '#submit' => array('budgets_batch_upload'),
    );

  $tmpId = time();
  $form['tmpId'] = array('#type'=>'hidden','#value'=>$tmpId);

  $form['#attributes']['enctype'] = 'multipart/form-data';

  $form['#redirect'] = 'node/'.$provider->id.'/budgets/batch/review/'.$tmpId;

  return $form;
}

function budgets_batch_upload($form_id, &$form_values) {
  global $user;

  $fupload = &$form_values['values'];

  guifi_log(GUIFILOG_TRACE, 'function budgets_batch_upload(_FILES)',$_FILES);
  guifi_log(GUIFILOG_TRACE, 'function budgets_batch_upload(form_id)',$form_id['form_build_id']['#value']);
  guifi_log(GUIFILOG_TRACE, 'function budgets_batch_upload(fupload)',$fupload['tmpId']);

  #this leads us to sites/mysite.example.com/files/
  $dir = file_directory_path();

  $sup = explode('-',$fupload['supplier']);

  // Processing headers file
  # unlike form submissions, multipart form submissions are not in
  # $form_state, but rather in $FILES, which requires more checking
  if (isset($_FILES) && !empty($_FILES) && $_FILES['files']['size']['csv_file_header'] != 0) {

    #this structure is kind of wacky
    $name = $_FILES['files']['name']['csv_file_header'];
    $size = $_FILES['files']['size']['csv_file_header'];
    $type = $_FILES['files']['type']['csv_file_header'];

    #this is the actual place where we store the file
    $file = file_save_upload('csv_file_header', array() , $dir);
    if($file){
      drupal_set_message(t('Uploading headers from %name',array('%name'=>$name)));
      guifi_log(GUIFILOG_TRACE, 'file',$file->filepath);

      /*
       * Parsing the uploaded file
       */
      $errors = 0;
      $loaded = 0;

      $fcsv = fopen($file->filepath, "r");
      $row=0;
      while (($data = fgetcsv($fcsv,4096,$fupload['delimiter'])) !== FALSE) {

        guifi_log(GUIFILOG_TRACE, 'data',$data);
        $row++;
        if ($row <= $fupload['skip'])
          continue;

        $budget['created'] = time();
        $budget['changed'] = time();
        $budget['status'] = 1;
        $budget['promote'] = 0;
        $budget['sticky'] = 0;
        $budget['uid']=$user->uid;
        $budget['notification']=$user->mail;
        $budget['type'] = 'budgets';
        $budget['budget_status'] = 'Preparation';
        $budget['comment']=1;
        $budget['supplier_id'] = $fupload['supplier'];
        $budget['key'] = $data[$fupload['headerkey']];
        $budget['title'] = $data[$fupload['headertitle']];
        $budget['body'] = $data[$fupload['headerbody']];
        $budget['accdate'] = $data[$fupload['headerdate']];
        $budget['node_id'] = $data[$fupload['headernode_id']];
        $budget['budget_type'] = $data[$fupload['headertype']];
        $budget['priority'] = $data[$fupload['headerpriority']];
        $budget['ticket_link'] = $data[$fupload['headerticket']];

        guifi_log(GUIFILOG_TRACE, 'budget', $budget);

        if ($budget['key'])
          $budgets[$budget['key']] = $budget;
        else
          $budgets[] = $budget;

//        node_save($budget);

//        if (!$budget->nid) {
//          drupal_set_message(t('Budget was NOT saved'));
//        }
      }
      fclose($fcsv);

      file_delete($file->filepath);
    }
    else{
        drupal_set_message("Something went wrong saving your file.");
    }
  }
  else {
    drupal_set_message("Your file doesn't appear to be here.");
  }

  // Processing items file
  # unlike form submissions, multipart form submissions are not in
  # $form_state, but rather in $FILES, which requires more checking
  if (isset($_FILES) && !empty($_FILES) && $_FILES['files']['size']['csv_file_items'] != 0) {

    #this structure is kind of wacky
    $name = $_FILES['files']['name']['csv_file_items'];
    $size = $_FILES['files']['size']['csv_file_items'];
    $type = $_FILES['files']['type']['csv_file_items'];

    #this is the actual place where we store the file
    $file = file_save_upload('csv_file_items', array() , $dir);
    if($file){
      drupal_set_message(t('Uploading items from %name',array('%name'=>$name)));
      guifi_log(GUIFILOG_TRACE, 'file',$file->filepath);

      /*
       * Parsing the uploaded file
       */
      $errors = 0;
      $loaded = 0;

      $fcsv = fopen($file->filepath, "r");
      $row=0;
      while (($data = fgetcsv($fcsv,4096,$fupload['delimiter'])) !== FALSE) {

        guifi_log(GUIFILOG_TRACE, 'data',$data);
        $row++;
        if ($row <= $fupload['skip'])
          continue;

        $item['key'] = $data[$fupload['itemkey']];
        $item['title'] = $data[$fupload['itemtitle']];
        $item['description'] = $data[$fupload['itemdescription']];
        $item['comments'] = $data[$fupload['itemcomments']];
        $item['quantity'] = $data[$fupload['itemquantity']];
        $item['cost'] = $data[$fupload['itemcost']];
        $item['tax'] = $data[$fupload['itemtax']];

        guifi_log(GUIFILOG_TRACE, 'item', $item);

        if (!isset($budgets[$item['key']])) {
          drupal_set_message(t('Loading item with key %key but has no header',
              array('%key'=>$item['key'])),'error');
          if (!isset($budgets[$item['key']]['items']))
            $budgets[$item['key']]['items'] = array();
        }
        if ($fupload[inBody]) {
          $budgets[$item[key]][body] .= '<br>'.$item[title].' ('.
            $item['quantity'].'x'.$item['cost'].' '.t('Tax').': '.$item['tax'].')<br>';
          if ($item[description])
            $budgets[$item[key]][body] .= '<br>'.$item[description];
          if ($item[comments])
            $budgets[$item[key]][body] .= '<br>'.$item[comments];
        } else
          $budgets[$item['key']]['items'][] = $item;

      }
      fclose($fcsv);

      file_delete($file->filepath);
    }
    else{
        drupal_set_message("Something went wrong saving your file.");
    }
  }
  else {
    drupal_set_message("Your file doesn't appear to be here.");
  }

  // done. saving the results (if there are) for user validation
  if (empty($budgets)) {
    drupal_set_message(t('Nothing to load with this parameters'));
    drupal_goto('node/'.arg(1).'/budgets/batch');
  }

  $fp = fopen(file_directory_temp().'/'.$fupload['tmpId'].'.tmp',"w");
  $ret = fwrite($fp,serialize($budgets));
  fclose($fp);

  if ($ret)
    drupal_set_message(t('Going to load %budgets budgets with %bytes bytes',
        array('%budgets'=>count($budgets),'%bytes'=>$ret)));

}


function budgets_ahah_select_budget($string) {
  $matches = array();

  $string = strtoupper(arg(3));

  $qry = db_query(
    'SELECT ' .
    '  CONCAT(b.id, "-", z.title, ", ",n.title) str '.
    'FROM {budgets} b, {guifi_zone} z, {node} n ' .
    'WHERE b.zone_id = z.id ' .
    '  AND b.id = n.nid ' .
//    '  AND b.id != %d ' .
    '  AND (CONCAT(b.id, "-", upper(z.title), ", ",upper(n.title)) ' .
    '    LIKE "%'. $string .'%") ' .
    'ORDER BY b.id DESC',
    $_POST['id']);

  $c = 0;
  $na = t('None');
  $matches[$na] = $na;
  while (($value = db_fetch_array($qry)) and ($c < 50)) {
    $c++;
    $matches[$value['str']] = $value['str'];
  }
  print drupal_to_js($matches);
  exit();
}

function budgets_ahah_select_supplier($string){
  $matches = array();

  $string = strtoupper(arg(3));

  $qry = db_query(
    'SELECT ' .
    '  CONCAT(s.id, "-", s.title) str '.
    'FROM {supplier} s, {node} n ' .
    'WHERE s.id=n.nid and ' .
    '  (CONCAT(s.id, "-", upper(s.title)) ' .
    '    LIKE "%'.$string.'%") ' .
    'ORDER BY s.title');

  $c = 0;
  while (($value = db_fetch_array($qry)) and ($c < 50)) {
    $c++;
    $matches[$value['str']] = $value['str'];
  }
  print drupal_to_js($matches);
  exit();
}

function budgets_ahah_select_quote($string) {
  $matches = array();

  $strings = str_word_count(strtoupper(arg(3)),1,'0123456789ÀÁÈÉÍÓÒÚÑÇÏÄËÜ');
  foreach ($strings as $k => $v) {
    $strings[$k] = '(CONCAT(upper(s.title), " ",q.id, "-", q.partno, ", ", upper(q.title)) LIKE "%'.$v.'%") ';
  }

  $qry = db_query(
    'SELECT ' .
    '  CONCAT(q.id,"-",s.title, "-", q.partno, ", ", q.title, " - Cost: ", format(q.cost,2) ) str '.
    'FROM {supplier_quote} q, {supplier} s ' .
    'WHERE q.supplier_id = s.id AND ' .
    implode(' AND ',$strings).
    'ORDER BY s.title, q.title, q.partno');

  $c = 0;
  $matches = array();
  while (($value = db_fetch_array($qry)) and ($c < 50)) {
    $c++;
    $matches[$value['str']] = $value['str'];
  }
  print drupal_to_js($matches);
  exit();
}


function budgets_ahah_status_dialog() {
  $cid = 'form_'. $_POST['form_build_id'];
  $cache = cache_get($cid, 'cache_form');

  $btype = $_POST['budget_type'];
  $bstatus = $_POST['budget_status'];

  //$bStatusOptions=guifi_types('budget_status',null,null,$btype);

  guifi_log(GUIFILOG_TRACE,sprintf('budgets_ahah_status_dialog (%s)',$btype));

  if ($cache) {
    $form = $cache->data;

    guifi_log(GUIFILOG_TRACE,sprintf('budgets_ahah_status_dialog (%s)',$btype),$_POST);

    //$choice_form = $form[general][status_dialog];
    $choice_form = budgets_form_status_dialog($btype,$bstatus);
    unset($choice_form['#prefix'], $choice_form['#suffix']); // Prevent duplicate wrappers.
    //if (!user_access('review budgets'))
    //  $bStatusOptions = array_diff_key($bStatusOptions,
    //    array('Approved'=>'','Review'=>'','Reviewed'=>'','Compensated'=>''));
    // $choice_form[budget_status]['#options'] = $bStatusOptions;
    //$choice_form[budget_status]['#default_value'] = $bstatus;
    $output = theme('status_messages') . drupal_render($choice_form);
    drupal_json(array('status' => TRUE, 'data' => $output));
  } else {
    drupal_json(array('status' => FALSE, 'data' => ''));
  }
  exit;
}

function budgets_cnml($node = NULL, $format = NULL, $status = NULL) {

  $node = node_load(array('nid' => $node->id));
  guifi_log(GUIFILOG_TRACE,
    sprintf('function budgets_cnml(%s %s)', $format, $status),
    $node);

  if ($format == NULL)
    return theme_budgets_cnml($node);

  // Filter by status
  if (($status == "All") or (empty($status)))
    $where_str = '';
  else
    $where_str = " AND budget_status='". $status ."' ";

  // filter by zone (childs&parents) or budget id
  if ($node->type == 'guifi_zone')
    $where_str .= " AND zone_id IN (".
      implode(',', guifi_zone_childs_and_parents($node->id)) .
      ") ";
  else
    $where_str .= " AND id=". $node->id;

  $CNML = new SimpleXMLElement('<cnml></cnml>');
  $CNML->addAttribute('version', '0.1');
  $CNML->addAttribute('server_id', '1');
  $CNML->addAttribute('server_url', 'http://guifi.net');
  $CNML->addAttribute('generated', date('Ymd hi', time()));
  $classXML = $CNML->addChild('class');
  $classXML->addAttribute('budgets', $format);

// TODO: Query by zone anr/or budget_status

  if ($node->type == 'guifi_zone') {
    $result = db_query(
      "SELECT b.id,b.zone_id " .
      "FROM {node} n, {budgets} b " .
      "WHERE n.nid=b.id ". $where_str .
      "ORDER BY FIND_IN_SET(budget_status,'Open,Preparation,Closed'), " .
      "  n.changed DESC");
    while ($b = db_fetch_object($result)) {
      budgets_cnml_budget($CNML, $b->id, $format);
    }
  }
  else
    budgets_cnml_budget($CNML, $node->id, $format);


  drupal_set_header('Content-Type: application/xml; charset=utf-8');
  echo $CNML->asXML();
  exit;
}

function budgets_cnml_budget(&$CNML, $bid, $format = 'short') {
  $budget = node_load(array('nid' => $bid));

  $budgetXML = $CNML->addChild('budget');
  $budgetXML->addAttribute('id', $bid);
  $budgetXML->addAttribute('title', $budget->title);
  $budgetXML->addAttribute('amount', $budget->total);
  $budgetXML->addAttribute('funded', $budget->covered);
  $budgetXML->addAttribute('zone_id', $budget->zone_id);
  $budgetXML->addAttribute('status', $budget->budget_status);

  // if format is short, that's all
  if ($format == 'short')
    return;

  $budgetXML->addAttribute('created', date('Ymd hi', $budget->created));
  $budgetXML->addAttribute('updated', date('Ymd hi', $budget->changed));
  $budgetXML->addAttribute('expires', date('Ymd hi', $budget->expires));


  $budgetXML->addAttribute('currency', $budget->currency_txt);
  $budgetXML->addChild('promoter',
    htmlspecialchars($budget->promoter, ENT_QUOTES));
  $budgetXML->addChild('payment_instructions',
    htmlspecialchars($budget->payment_instructions, ENT_QUOTES));
  $budgetXML->addChild('terms',
    htmlspecialchars($budget->terms, ENT_QUOTES));

  // items
  if (!empty($budget->items)) {
    $itemsXML = $budgetXML->addChild('items');
    foreach ($budget->items as $iid => $item) {
      $itemXML = $itemsXML->addChild('item',
        htmlspecialchars($item['description'], ENT_QUOTES));
      $itemXML->addAttribute('id', $item['id']);
      if (!empty($item['title']))
        $itemXML->addAttribute('title', $item['title']);
      $itemXML->addAttribute('quantity', $item['quantity']);
      $itemXML->addAttribute('cost', $item['cost']);
      if (!empty($item['comments']))
        $itemXML->addChild('comments',
          htmlspecialchars($item['comments'], ENT_QUOTES));
    }
  }

  // funds
  if (!empty($budget->funds)) {
    $fundsXML = $budgetXML->addChild('funds');
    foreach ($budget->funds as $fid => $fund) {
      $fundXML = $fundsXML->addChild('fund',
        htmlspecialchars($fund['comments'], ENT_QUOTES));
      $fundXML->addAttribute('id', $fund['id']);
      $fundXML->addAttribute('status', $fund['fund_status']);
      $fundXML->addAttribute('amount', $fund['amount']);
      $fundXML->addAttribute('contributor', $fund['contributor_name']);
      $fundXML->addAttribute('created', date('Ymd hi', $fund['timestamp_created']));
    }
  }
  return;
}

function theme_refquote($quote, $supplier, $teaser = FALSE) {
  $refquote = t('Ref.') .': '. l($quote->partno, 'node/'. $quote->nid) .' ('.
     l($supplier->title, 'node/'. $supplier->nid) .'), '.
     t('Tax').': ';
  ($quote->tax) ? $refquote.= number_format($quote->tax, 0, ',', '.').'% ' :
     $refquote.= t('incl.');
  if ($teaser)
    return $refquote.
      '<h2>'.t('Cost') .': <bold><em>'. number_format($quote->cost, 2, ',', '.').'</bold></em></h2>';

  return $refquote.
      t('Cost') .': <bold><em>'. number_format($quote->cost, 2, ',', '.').'</bold></em>';
}

function theme_budgets_header($node, $teaser) {

  // $dfshort = variable_get('date_format_short');

  /*
   * Common logic
   */
  if ($node->supplier_id > 0)
    $sup=node_load($node->supplier_id);

  $dfshort = "d/m/Y";
  if (($node->budget_status=='Open') or ($node->budget_type=='crowdfunding')) {
    $SDate = t('until').' '.date($dfshort,$node->expires);
  } else {
    $SDate = t('due').' '.date($dfshort,$node->accdate);
  }
  $TBStatus = guifi_types('budget_status');
  $TBType   = guifi_types('budget_type');
  $SBStatus = t($TBStatus[$node->budget_status]);
  $SBType   = t($TBType[$node->budget_type]);
  $SBPLink  = t($node->priority);
  if ($SBPLink==t('unknown'))
    $SBPLink = t('n/d');
  if (!empty($node->ticket_link))
    $SBPLink = l($SBPLink,$node->ticket_link,
      array('attributes'=>array('target'=>'_blank')));
  else
    $SBPLink = $SBPLink.' ('.t('no ticket').')';

  if (!empty($node->node_id)) {
    $SLocation = t('Node').': '
      .l($node->node_id,'node/'.$node->node_id.'/view')
      .'-'.l(guifi_get_nodename($node->node_id),'node/'.$node->node_id.'/view/nodebudgets')
      .' ('.l(t('devices'),'node/'.$node->node_id.'/view/devices').')';
  }
  $SLocation .= ' - '.t('Zone').': '.l(guifi_get_zone_name($node->zone_id),'node/'.$node->zone_id.'/view/budgets');
    $SContact = '<a href="mailto:'.$node->notification.'">'.$node->notification.'</a>';
    if (isset($sup)) {
      $SContact .= ' - '.l($sup->id.'-'.$sup->title,'node/'.$sup->id);
    }

  $node->expires = mktime(0, 0, 0,
    $node->arrexpires['month'],
    $node->arrexpires['day'],
    $node->arrexpires['year']
    );

  $btypes = guifi_types('budget_type');
  if ($teaser) {
  	$output = '';
    if (isset($sup))
      $output .= t('Supplier').': '.l($sup->title,'node/'.$sup->id.'/budgets').' - ';

    $total = 0;
    $items = 0;
    if ($node->items) foreach ($node->items as $item) {
      $subtotal = ($item['quantity'] * $item['cost']);
      if (($item['tax']) > 0)
        $subtotal = $subtotal + ($subtotal * ($item['tax']/100));
      if (($item['deleted']) or (!$subtotal))
        continue;

      $total += $subtotal;
      $items++;
    }
    $output .= $SBStatus.' - '.$SBPLink.' - '.$SBType.' - '.$SDate.' - '.$SLocation;
    $output .= ', '. format_plural($items, t('1 item'), '@count items');
    $rows[] = array(
      array('data'=>$output),
      array('data'=>number_format($total, 2, $decml, $thsnd). $node->currency_symbol,'class' =>'budget-items-number-total' ),
    );
    $output = '<br>'.theme('table',null,$rows);
  }
  else {
  	$rows = array();
  	$rows[] = array (
  	  array('data'=>t('Date & Status')),
  	  array('data'=>$SBType.', '.$SDate. ' - '.t('Status').': '.$SBStatus),
  	);
  	$rows[] = array(
  	  array('data'=>t('Priority & ticket')),
  	  array('data'=>$SBPLink),
  	);
    if (isset($sup))
      $rows[] = array (
  	    array('data'=>t('Location')),
  	    array('data'=>$SLocation),
  	);
  	$rows[] = array (
  	  array('data'=>t('Contact')),
  	  array('data'=>$SContact),
  	);
    if (!empty($node->promoters)) {
      $rows[] = array(
        array('data'=>t('Promoter(s)')),
        array('data'=>$node->promoters),
      );
    }
  	$output .= theme('table',null,$rows);
  }
  if (!(($node->budget_type=='crowdfunding') or ($node->budget_status=='Open')))
    return $output;
  else
    return $output .
      budgets_bar($node->total, $node->covered, $node->currency_symbol);
}

function theme_budgets_footer($node) {
  $output = '</hr>';

  if (!(($node->budget_type=='crowdfunding') or ($node->budget_status=='Open')))
    return $output;

  if (!empty($node->payment_instructions)) {
    $output .= '<h3>'. t('Payment instructions') .'</h3>';
    $output .= '<small'. $node->payment_instructions .'</small>';
  }
  if (!empty($node->terms)) {
    $output .= '<h3>'. t('Terms & Conditions') .'</h3>';
    $output .= '<small>'. $node->terms .'</small>';
  }
  return $output;
}

function theme_budgets_batch($budget) {
  $output = '<hr>';

  $output .= $budget['key'].' '.t('Date').': '.$budget[accdate].' '.t('Title').': <em>'.$budget[title].'</em><br>';
  if (($budget[node_id]) or ($budget[budget_type]) or ($budget[priority]) or ($budget[ticket_link]))
    $output .= t('Optional fields').': '.
      t('Type').': '.$budget[budget_type].' '.
      t('Node').': '.$budget[node_id].' '.
      t('Priority').': '.$budget[priority].' '.
      t('Ticket').': '.$budget[ticket_link].'<br>';

  $output .= '<small>'.$budget[body].'</small><br>';

  if (empty($budget[items]))
    return $output;

  $output .= t('Items').' ('.count($budget[items]).')<br>';

  foreach ($budget[items] as $item) {
    $output .= $item[title].' ('.
      t('Quantity').': '.$item[quantity].' '.
      t('Cost').': '.$item[cost].' '.
      t('Tax').': '.$item[tax].')<br>';

    if ($item[description])
      $output .= '<small>'.$item[description].'</small><br>';

    if ($item[comments])
      $output .= t('Comments').':<br><small>'.$item[comments].'</small><br>';
  }
  return $output;
}


function theme_budgets_page_header($zone) {
  $output = t('<h1><br>Report of all proposals/budgets defined in the database<br></h1>');
  $output = '';

  // Zone message
  if ($zone->id) {
    $output .= '<br>'. t('Zone') .': '.
      guifi_zone_l($zone->id, $zone->title) .'<br>'.
      '<small>'. t('The report includes budgets for parent and child nodes') .
      '</small>';
  }
  else
    $output .= '<h3>'. t('Reporting all zones') .'</h3>';

  $status = arg(2);

  $pstatus = array('Open','Preparation','Closed');
  if (empty($status)) {
    $output .= '<h3><br>'.t('Reporting all status').'</h3>';
    $output .= '<small>'.t('Restrict the report to').':</small>';

    foreach ($pstatus as $s) {
      $links[] = array(
        'title' => t($s),
        'href'=> 'budgets/'. $zone->id.'/'.$s,
        'attributes' => array(
          'title' => t('List budgets/proposals with status set as !status',
            array('!status' => t($s)))
        )
      );
    }
  } else {
    $output .= '<h3><br>'.
      t('Reporting status %status',array('%status' => $status)).'</h3>';
    $output .= '<small>'.t('Restrict the report to').':</small>';
    $links[] = array(
      'title' => t('All status'),
      'href'=> 'budgets/'. $zone->id,
      'attributes' => array(
        'title' => t('List all budgets/proposals regardless of the status'))
      );
    foreach ($pstatus as $s) {
      if ($s != $status)
      $links[] = array(
        'title' => t($s),
        'href'=> 'budgets/'. $zone->id.'/'.$s,
        'attributes' => array(
          'title' => t('List budgets/proposals with status set as !status',
            array('!status' => t($s)))
        )
      );
    }
  }
  $output .= theme_links($links).'<br>';

  return '<hr>'. $output .'<hr>';
}

function guifi_bg_zone_root() {
  $root = db_fetch_object(db_query(
    "SELECT id " .
    "FROM {guifi_zone} " .
    "WHERE master = 0"));
  return $root->id;
}

/**
* Implementation of hook_cron().
*/
function budgets_cron() {
}


?>
